
RealayControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000010e  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  000001ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000221  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000193  00000000  00000000  0000042b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000192  00000000  00000000  000005be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00000750  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001d3  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000e7  00000000  00000000  00000993  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00000a7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e0       	ldi	r30, 0x0E	; 14
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  7a:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <USARTInit>:

	ATMega16 Calibrated Internal RC Oscilator Frequency = 12 MHz

	*/

	UBRRL = ubrr_value;
  82:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0;
  84:	10 bc       	out	0x20, r1	; 32
	UCSRC|=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  86:	80 b5       	in	r24, 0x20	; 32
  88:	86 68       	ori	r24, 0x86	; 134
  8a:	80 bd       	out	0x20, r24	; 32
	UCSRB=(1<<RXEN)|(1<<TXEN);     				// Enable Receiver & Transmitter
  8c:	88 e1       	ldi	r24, 0x18	; 24
  8e:	8a b9       	out	0x0a, r24	; 10
  90:	08 95       	ret

00000092 <USARTReadChar>:
}

unsigned char USARTReadChar()  				// USART recieving function
{
	while(!(UCSRA & (1<<RXC)));      			// Wait till the receiving  is not completed.
  92:	5f 9b       	sbis	0x0b, 7	; 11
  94:	fe cf       	rjmp	.-4      	; 0x92 <USARTReadChar>
	return UDR;            					// Return the received data
  96:	8c b1       	in	r24, 0x0c	; 12
}
  98:	08 95       	ret

0000009a <USARTTransmitChar>:

void USARTTransmitChar(unsigned char data) 	// USART transmitting function
{
	while(!(UCSRA & (1<<UDRE)));   			// Wait till the data  register is not Empty.
  9a:	5d 9b       	sbis	0x0b, 5	; 11
  9c:	fe cf       	rjmp	.-4      	; 0x9a <USARTTransmitChar>
	UDR=data;          						// put the data to be transfer
  9e:	8c b9       	out	0x0c, r24	; 12
  a0:	08 95       	ret

000000a2 <USART_StringTransmit>:
}

void USART_StringTransmit(unsigned char s[])  // function for string transmit
{
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	ec 01       	movw	r28, r24
	int i=0;
	while(s[i]!='\0')
  a8:	88 81       	ld	r24, Y
  aa:	88 23       	and	r24, r24
  ac:	31 f0       	breq	.+12     	; 0xba <USART_StringTransmit+0x18>
  ae:	21 96       	adiw	r28, 0x01	; 1
	{
		USARTTransmitChar(s[i]);
  b0:	0e 94 4d 00 	call	0x9a	; 0x9a <USARTTransmitChar>
}

void USART_StringTransmit(unsigned char s[])  // function for string transmit
{
	int i=0;
	while(s[i]!='\0')
  b4:	89 91       	ld	r24, Y+
  b6:	81 11       	cpse	r24, r1
  b8:	fb cf       	rjmp	.-10     	; 0xb0 <USART_StringTransmit+0xe>
	{
		USARTTransmitChar(s[i]);
		i++;
	}

}
  ba:	df 91       	pop	r29
  bc:	cf 91       	pop	r28
  be:	08 95       	ret

000000c0 <main>:

int main(void) 								// main function
{
	DDRB=0b00011111;  							// declare PB4 as a output Pin connected to Buzzer
  c0:	8f e1       	ldi	r24, 0x1F	; 31
  c2:	87 bb       	out	0x17, r24	; 23
	unsigned char data;
	USARTInit(18);   							
  c4:	82 e1       	ldi	r24, 0x12	; 18
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 41 00 	call	0x82	; 0x82 <USARTInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	2f e7       	ldi	r18, 0x7F	; 127
  ce:	89 ea       	ldi	r24, 0xA9	; 169
  d0:	93 e0       	ldi	r25, 0x03	; 3
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x12>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x1c>
  dc:	00 00       	nop
						// Print the text
	_delay_ms(100);
	PORTB=0b00000001;  
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	88 bb       	out	0x18, r24	; 24
		
		if((data=='A')||(data=='a'))
		{
			USART_StringTransmit(" Left Turn\n\r");	// string transmit
			
			PORTB=0b00000001;							// Turning Left
  e2:	c1 e0       	ldi	r28, 0x01	; 1
						// Print the text
	_delay_ms(100);
	PORTB=0b00000001;  
	while(1)  									// infinite loop
	{
		data=USARTReadChar();   				// waiting to receive new data
  e4:	0e 94 49 00 	call	0x92	; 0x92 <USARTReadChar>
		     				// Buzzer ON
		

		if((data=='W')||(data=='w'))
  e8:	8f 7d       	andi	r24, 0xDF	; 223
  ea:	87 35       	cpi	r24, 0x57	; 87
  ec:	31 f4       	brne	.+12     	; 0xfa <main+0x3a>
		{
			USART_StringTransmit(" Forward\n\r"); 	// string transmit
  ee:	80 e6       	ldi	r24, 0x60	; 96
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 51 00 	call	0xa2	; 0xa2 <USART_StringTransmit>
			
			PORTB=0b00000000;							// Move Forward
  f6:	18 ba       	out	0x18, r1	; 24
  f8:	f5 cf       	rjmp	.-22     	; 0xe4 <main+0x24>
		}
		
		if((data=='A')||(data=='a'))
  fa:	81 34       	cpi	r24, 0x41	; 65
  fc:	99 f7       	brne	.-26     	; 0xe4 <main+0x24>
		{
			USART_StringTransmit(" Left Turn\n\r");	// string transmit
  fe:	8b e6       	ldi	r24, 0x6B	; 107
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 51 00 	call	0xa2	; 0xa2 <USART_StringTransmit>
			
			PORTB=0b00000001;							// Turning Left
 106:	c8 bb       	out	0x18, r28	; 24
 108:	ed cf       	rjmp	.-38     	; 0xe4 <main+0x24>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
