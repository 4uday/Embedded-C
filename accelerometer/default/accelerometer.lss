
accelerometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001010  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  00001010  000010a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080009a  0080009a  000010de  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000010de  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000d3  00000000  00000000  000010fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000064c  00000000  00000000  000011d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000031e  00000000  00000000  0000181d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007dc  00000000  00000000  00001b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  00002318  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b8  00000000  00000000  00002438  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002c1  00000000  00000000  000025f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000028b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e1       	ldi	r30, 0x10	; 16
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 39       	cpi	r26, 0x9A	; 154
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e9       	ldi	r26, 0x9A	; 154
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 39       	cpi	r26, 0x9F	; 159
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 62 01 	call	0x2c4	; 0x2c4 <main>
      8a:	0c 94 06 08 	jmp	0x100c	; 0x100c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs) 
{
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
      92:	66 23       	and	r22, r22
      94:	11 f0       	breq	.+4      	; 0x9a <lcd_write+0x8>
       lcd_rs_high();
      96:	a8 9a       	sbi	0x15, 0	; 21
      98:	01 c0       	rjmp	.+2      	; 0x9c <lcd_write+0xa>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
      9a:	a8 98       	cbi	0x15, 0	; 21
    }
    lcd_rw_low();
      9c:	a9 98       	cbi	0x15, 1	; 21
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
      9e:	a4 9a       	sbi	0x14, 4	; 20
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
      a0:	a5 9a       	sbi	0x14, 5	; 20
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
      a2:	a6 9a       	sbi	0x14, 6	; 20
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
      a4:	a7 9a       	sbi	0x14, 7	; 20
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
      a6:	af 98       	cbi	0x15, 7	; 21
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
      a8:	ae 98       	cbi	0x15, 6	; 21
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
      aa:	ad 98       	cbi	0x15, 5	; 21
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
      ac:	ac 98       	cbi	0x15, 4	; 21
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
      ae:	87 fd       	sbrc	r24, 7
      b0:	af 9a       	sbi	0x15, 7	; 21
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
      b2:	86 fd       	sbrc	r24, 6
      b4:	ae 9a       	sbi	0x15, 6	; 21
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
      b6:	85 fd       	sbrc	r24, 5
      b8:	ad 9a       	sbi	0x15, 5	; 21
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
      ba:	84 fd       	sbrc	r24, 4
      bc:	ac 9a       	sbi	0x15, 4	; 21

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
      be:	aa 9a       	sbi	0x15, 2	; 21
    lcd_e_delay();
      c0:	00 c0       	rjmp	.+0      	; 0xc2 <lcd_write+0x30>
    lcd_e_low();
      c2:	aa 98       	cbi	0x15, 2	; 21
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
        lcd_e_toggle();
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
      c4:	af 98       	cbi	0x15, 7	; 21
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
      c6:	ae 98       	cbi	0x15, 6	; 21
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
      c8:	ad 98       	cbi	0x15, 5	; 21
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
      ca:	ac 98       	cbi	0x15, 4	; 21
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
      cc:	83 fd       	sbrc	r24, 3
      ce:	af 9a       	sbi	0x15, 7	; 21
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
      d0:	82 fd       	sbrc	r24, 2
      d2:	ae 9a       	sbi	0x15, 6	; 21
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
      d4:	81 fd       	sbrc	r24, 1
      d6:	ad 9a       	sbi	0x15, 5	; 21
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
      d8:	80 fd       	sbrc	r24, 0
      da:	ac 9a       	sbi	0x15, 4	; 21

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
      dc:	aa 9a       	sbi	0x15, 2	; 21
    lcd_e_delay();
      de:	00 c0       	rjmp	.+0      	; 0xe0 <lcd_write+0x4e>
    lcd_e_low();
      e0:	aa 98       	cbi	0x15, 2	; 21
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();        
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
      e2:	ac 9a       	sbi	0x15, 4	; 21
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
      e4:	ad 9a       	sbi	0x15, 5	; 21
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
      e6:	ae 9a       	sbi	0x15, 6	; 21
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
      e8:	af 9a       	sbi	0x15, 7	; 21
    }
}
      ea:	08 95       	ret

000000ec <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
      ec:	88 23       	and	r24, r24
      ee:	11 f0       	breq	.+4      	; 0xf4 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
      f0:	a8 9a       	sbi	0x15, 0	; 21
      f2:	01 c0       	rjmp	.+2      	; 0xf6 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
      f4:	a8 98       	cbi	0x15, 0	; 21
    lcd_rw_high();                           /* RW=1  read mode      */
      f6:	a9 9a       	sbi	0x15, 1	; 21
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
      f8:	a4 98       	cbi	0x14, 4	; 20
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
      fa:	a5 98       	cbi	0x14, 5	; 20
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
      fc:	a6 98       	cbi	0x14, 6	; 20
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
      fe:	a7 98       	cbi	0x14, 7	; 20
                
        /* read high nibble first */
        lcd_e_high();
     100:	aa 9a       	sbi	0x15, 2	; 21
        lcd_e_delay();        
     102:	00 c0       	rjmp	.+0      	; 0x104 <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     104:	9c 9b       	sbis	0x13, 4	; 19
     106:	02 c0       	rjmp	.+4      	; 0x10c <lcd_read+0x20>
     108:	80 e1       	ldi	r24, 0x10	; 16
     10a:	01 c0       	rjmp	.+2      	; 0x10e <lcd_read+0x22>
     10c:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
     10e:	9d 99       	sbic	0x13, 5	; 19
     110:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
     112:	9e 99       	sbic	0x13, 6	; 19
     114:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
     116:	9f 99       	sbic	0x13, 7	; 19
     118:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
     11a:	aa 98       	cbi	0x15, 2	; 21

        lcd_e_delay();                       /* Enable 500ns low       */
     11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
     11e:	aa 9a       	sbi	0x15, 2	; 21
        lcd_e_delay();
     120:	00 c0       	rjmp	.+0      	; 0x122 <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
     122:	9c 99       	sbic	0x13, 4	; 19
     124:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
     126:	9d 99       	sbic	0x13, 5	; 19
     128:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
     12a:	9e 99       	sbic	0x13, 6	; 19
     12c:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
     12e:	9f 99       	sbic	0x13, 7	; 19
     130:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
     132:	aa 98       	cbi	0x15, 2	; 21
    }
    return data;
}
     134:	08 95       	ret

00000136 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
     136:	80 e0       	ldi	r24, 0x00	; 0
     138:	0e 94 76 00 	call	0xec	; 0xec <lcd_read>
     13c:	87 fd       	sbrc	r24, 7
     13e:	fb cf       	rjmp	.-10     	; 0x136 <lcd_waitbusy>
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
     140:	00 c0       	rjmp	.+0      	; 0x142 <lcd_waitbusy+0xc>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	0e 94 76 00 	call	0xec	; 0xec <lcd_read>
    
}/* lcd_waitbusy */
     148:	08 95       	ret

0000014a <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
     14a:	1f 93       	push	r17
     14c:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     14e:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_waitbusy>
    lcd_write(cmd,0);
     152:	81 2f       	mov	r24, r17
     154:	60 e0       	ldi	r22, 0x00	; 0
     156:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
}
     15a:	1f 91       	pop	r17
     15c:	08 95       	ret

0000015e <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
     15e:	1f 93       	push	r17
     160:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     162:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_waitbusy>
    lcd_write(data,1);
     166:	81 2f       	mov	r24, r17
     168:	61 e0       	ldi	r22, 0x01	; 1
     16a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
}
     16e:	1f 91       	pop	r17
     170:	08 95       	ret

00000172 <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
     172:	66 23       	and	r22, r22
     174:	11 f4       	brne	.+4      	; 0x17a <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
     176:	80 58       	subi	r24, 0x80	; 128
     178:	01 c0       	rjmp	.+2      	; 0x17c <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
     17a:	80 54       	subi	r24, 0x40	; 64
     17c:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
     180:	08 95       	ret

00000182 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
     182:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_waitbusy>
}
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	08 95       	ret

0000018a <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
}
     190:	08 95       	ret

00000192 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
     192:	82 e0       	ldi	r24, 0x02	; 2
     194:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
}
     198:	08 95       	ret

0000019a <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
     19a:	1f 93       	push	r17
     19c:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
     19e:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_waitbusy>
    if (c=='\n')
     1a2:	1a 30       	cpi	r17, 0x0A	; 10
     1a4:	49 f4       	brne	.+18     	; 0x1b8 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
     1a6:	80 34       	cpi	r24, 0x40	; 64
     1a8:	10 f0       	brcs	.+4      	; 0x1ae <lcd_putc+0x14>
     1aa:	80 e0       	ldi	r24, 0x00	; 0
     1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <lcd_putc+0x16>
     1ae:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
     1b0:	80 58       	subi	r24, 0x80	; 128
     1b2:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
     1b8:	81 2f       	mov	r24, r17
     1ba:	61 e0       	ldi	r22, 0x01	; 1
     1bc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
    }

}/* lcd_putc */
     1c0:	1f 91       	pop	r17
     1c2:	08 95       	ret

000001c4 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
     1c4:	cf 93       	push	r28
     1c6:	df 93       	push	r29
     1c8:	ec 01       	movw	r28, r24
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <lcd_puts+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
     1cc:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
     1d0:	89 91       	ld	r24, Y+
     1d2:	88 23       	and	r24, r24
     1d4:	d9 f7       	brne	.-10     	; 0x1cc <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
     1d6:	df 91       	pop	r29
     1d8:	cf 91       	pop	r28
     1da:	08 95       	ret

000001dc <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     1dc:	cf 93       	push	r28
     1de:	df 93       	push	r29
     1e0:	ec 01       	movw	r28, r24
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
     1e4:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_putc>
     1e8:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     1ea:	21 96       	adiw	r28, 0x01	; 1
     1ec:	84 91       	lpm	r24, Z+
     1ee:	88 23       	and	r24, r24
     1f0:	c9 f7       	brne	.-14     	; 0x1e4 <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	08 95       	ret

000001f8 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     1f8:	1f 93       	push	r17
     1fa:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     1fc:	a0 9a       	sbi	0x14, 0	; 20
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     1fe:	a1 9a       	sbi	0x14, 1	; 20
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     200:	a2 9a       	sbi	0x14, 2	; 20
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     202:	a4 9a       	sbi	0x14, 4	; 20
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     204:	a5 9a       	sbi	0x14, 5	; 20
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     206:	a6 9a       	sbi	0x14, 6	; 20
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     208:	a7 9a       	sbi	0x14, 7	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     20a:	80 ea       	ldi	r24, 0xA0	; 160
     20c:	9f e0       	ldi	r25, 0x0F	; 15
     20e:	01 97       	sbiw	r24, 0x01	; 1
     210:	f1 f7       	brne	.-4      	; 0x20e <lcd_init+0x16>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     212:	ad 9a       	sbi	0x15, 5	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     214:	ac 9a       	sbi	0x15, 4	; 21

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     216:	aa 9a       	sbi	0x15, 2	; 21
    lcd_e_delay();
     218:	00 c0       	rjmp	.+0      	; 0x21a <lcd_init+0x22>
    lcd_e_low();
     21a:	aa 98       	cbi	0x15, 2	; 21
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     21c:	80 ee       	ldi	r24, 0xE0	; 224
     21e:	94 e0       	ldi	r25, 0x04	; 4
     220:	01 97       	sbiw	r24, 0x01	; 1
     222:	f1 f7       	brne	.-4      	; 0x220 <lcd_init+0x28>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     224:	aa 9a       	sbi	0x15, 2	; 21
    lcd_e_delay();
     226:	00 c0       	rjmp	.+0      	; 0x228 <lcd_init+0x30>
    lcd_e_low();
     228:	aa 98       	cbi	0x15, 2	; 21
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     22a:	80 e1       	ldi	r24, 0x10	; 16
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	fc 01       	movw	r30, r24
     230:	31 97       	sbiw	r30, 0x01	; 1
     232:	f1 f7       	brne	.-4      	; 0x230 <lcd_init+0x38>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     234:	aa 9a       	sbi	0x15, 2	; 21
    lcd_e_delay();
     236:	00 c0       	rjmp	.+0      	; 0x238 <lcd_init+0x40>
    lcd_e_low();
     238:	aa 98       	cbi	0x15, 2	; 21
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     23a:	fc 01       	movw	r30, r24
     23c:	31 97       	sbiw	r30, 0x01	; 1
     23e:	f1 f7       	brne	.-4      	; 0x23c <lcd_init+0x44>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     240:	ac 98       	cbi	0x15, 4	; 21

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     242:	aa 9a       	sbi	0x15, 2	; 21
    lcd_e_delay();
     244:	00 c0       	rjmp	.+0      	; 0x246 <lcd_init+0x4e>
    lcd_e_low();
     246:	aa 98       	cbi	0x15, 2	; 21
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     248:	01 97       	sbiw	r24, 0x01	; 1
     24a:	f1 f7       	brne	.-4      	; 0x248 <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     24c:	88 e2       	ldi	r24, 0x28	; 40
     24e:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     252:	88 e0       	ldi	r24, 0x08	; 8
     254:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
     258:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     25c:	86 e0       	ldi	r24, 0x06	; 6
     25e:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     262:	81 2f       	mov	r24, r17
     264:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>

}/* lcd_init */
     268:	1f 91       	pop	r17
     26a:	08 95       	ret

0000026c <ReadADC>:
#define Z_STOP 460
	char buffer[5];

int ReadADC(uint8_t ch)
{
   ADC=0;		
     26c:	15 b8       	out	0x05, r1	; 5
     26e:	14 b8       	out	0x04, r1	; 4
   //Select ADC Channel ch must be 0-7
   ADMUX = ADMUX & 0b11100000; //ADMUX7,6 is to select VREF and ADCMUX 5 is ADLAR
     270:	97 b1       	in	r25, 0x07	; 7
     272:	90 7e       	andi	r25, 0xE0	; 224
     274:	97 b9       	out	0x07, r25	; 7
   ch=ch&0b00000111;
   ADMUX|=ch;		       // selecting the ADC channel	
     276:	97 b1       	in	r25, 0x07	; 7
     278:	87 70       	andi	r24, 0x07	; 7
     27a:	89 2b       	or	r24, r25
     27c:	87 b9       	out	0x07, r24	; 7
//Start Single conversion
   ADCSRA |= (1<<ADSC);
     27e:	36 9a       	sbi	0x06, 6	; 6
   //Wait for conversion to complete
   while(!(ADCSRA&(1<<ADIF)));	// ADIF 1 when conversion completes
     280:	34 9b       	sbis	0x06, 4	; 6
     282:	fe cf       	rjmp	.-4      	; 0x280 <ReadADC+0x14>
//Clear ADIF by writing one to it
ADCSRA|=(1<<ADIF); // thisis how ADIF is cleared
     284:	34 9a       	sbi	0x06, 4	; 6
   return(ADC);
     286:	24 b1       	in	r18, 0x04	; 4
     288:	35 b1       	in	r19, 0x05	; 5
}
     28a:	c9 01       	movw	r24, r18
     28c:	08 95       	ret

0000028e <initADC>:
	void initADC()
		{
		ADMUX=(1<<REFS0);  // For Aref=AVcc;
     28e:	80 e4       	ldi	r24, 0x40	; 64
     290:	87 b9       	out	0x07, r24	; 7
		ADCSRA=(1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS1); //Prescalar div factor =128
     292:	8e e8       	ldi	r24, 0x8E	; 142
     294:	86 b9       	out	0x06, r24	; 6
		}
     296:	08 95       	ret

00000298 <wait>:
	void wait(float x)
		{
		int i;
		for(i=0;i<(int)(61*x);i++)
     298:	20 e0       	ldi	r18, 0x00	; 0
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	44 e7       	ldi	r20, 0x74	; 116
     29e:	52 e4       	ldi	r21, 0x42	; 66
     2a0:	0e 94 93 02 	call	0x526	; 0x526 <__mulsf3>
     2a4:	0e 94 8d 03 	call	0x71a	; 0x71a <__fixsfsi>
     2a8:	20 e0       	ldi	r18, 0x00	; 0
     2aa:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	05 c0       	rjmp	.+10     	; 0x2bc <wait+0x24>
     2b2:	fc 01       	movw	r30, r24
     2b4:	31 97       	sbiw	r30, 0x01	; 1
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <wait+0x1c>
     2b8:	2f 5f       	subi	r18, 0xFF	; 255
     2ba:	3f 4f       	sbci	r19, 0xFF	; 255
     2bc:	26 17       	cp	r18, r22
     2be:	37 07       	cpc	r19, r23
     2c0:	c4 f3       	brlt	.-16     	; 0x2b2 <wait+0x1a>
		_delay_loop_2(0);
		}
     2c2:	08 95       	ret

000002c4 <main>:
int main(void)
{
     2c4:	4f 92       	push	r4
     2c6:	5f 92       	push	r5
     2c8:	6f 92       	push	r6
     2ca:	7f 92       	push	r7
     2cc:	8f 92       	push	r8
     2ce:	9f 92       	push	r9
     2d0:	af 92       	push	r10
     2d2:	bf 92       	push	r11
     2d4:	cf 92       	push	r12
     2d6:	df 92       	push	r13
     2d8:	ef 92       	push	r14
     2da:	ff 92       	push	r15
     2dc:	0f 93       	push	r16
     2de:	1f 93       	push	r17
     2e0:	cf 93       	push	r28
     2e2:	df 93       	push	r29
DDRA=0x00;
     2e4:	1a ba       	out	0x1a, r1	; 26
DDRB=0xFF;
     2e6:	8f ef       	ldi	r24, 0xFF	; 255
     2e8:	87 bb       	out	0x17, r24	; 23
lcd_init(LCD_DISP_ON);
     2ea:	8c e0       	ldi	r24, 0x0C	; 12
     2ec:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_init>
lcd_clrscr();
     2f0:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_clrscr>
ADCSRA|=(1<<ADIF); // thisis how ADIF is cleared
   return(ADC);
}
	void initADC()
		{
		ADMUX=(1<<REFS0);  // For Aref=AVcc;
     2f4:	80 e4       	ldi	r24, 0x40	; 64
     2f6:	87 b9       	out	0x07, r24	; 7
		ADCSRA=(1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS1); //Prescalar div factor =128
     2f8:	8e e8       	ldi	r24, 0x8E	; 142
     2fa:	86 b9       	out	0x06, r24	; 6
#define Z_STOP 460
	char buffer[5];

int ReadADC(uint8_t ch)
{
   ADC=0;		
     2fc:	88 24       	eor	r8, r8
     2fe:	99 24       	eor	r9, r9
{
x=ReadADC(1);
y=ReadADC(2);
z=ReadADC(3);
lcd_gotoxy(0,0);
sprintf(buffer,"x=%4d, y=%4d,\nz=%4d    ",x,y,z);
     300:	5a e9       	ldi	r21, 0x9A	; 154
     302:	c5 2e       	mov	r12, r21
     304:	50 e0       	ldi	r21, 0x00	; 0
     306:	d5 2e       	mov	r13, r21
     308:	40 e6       	ldi	r20, 0x60	; 96
     30a:	a4 2e       	mov	r10, r20
     30c:	40 e0       	ldi	r20, 0x00	; 0
     30e:	b4 2e       	mov	r11, r20
lcd_gotoxy(8,1);
lcd_puts("LEFT");
}
	if((x>(X_RIGHT-range))&&(x<(X_RIGHT+range))&&(y>(Y_RIGHT-range))&&(y<(Y_RIGHT+range))&&(z>(Z_RIGHT-range))&&(z<(Z_RIGHT+range)))
	{
	PORTB=0b00100000; // right
     310:	30 e2       	ldi	r19, 0x20	; 32
     312:	53 2e       	mov	r5, r19
	lcd_gotoxy(8,1);
	lcd_puts("BACK");
	}
if((x>(X_LEFT-range))&&(x<(X_LEFT+range))&&(y>(Y_LEFT-range))&&(y<(Y_LEFT+range))&&(z>(Z_LEFT-range))&&(z<(Z_LEFT+range)))
{
PORTB=0b00000100; // left
     314:	24 e0       	ldi	r18, 0x04	; 4
     316:	42 2e       	mov	r4, r18
lcd_gotoxy(8,1);
lcd_puts("FRWD");
}
	if((x>(X_BACKWARD-range))&&(x<(X_BACKWARD+range))&&(y>(Y_BACKWARD-range))&&(y<(Y_BACKWARD+range))&&(z>(Z_BACKWARD-range))&&(z<(Z_BACKWARD+range)))
	{
	PORTB=0b00011000; // back
     318:	98 e1       	ldi	r25, 0x18	; 24
     31a:	79 2e       	mov	r7, r25
lcd_gotoxy(8,1);
lcd_puts("STOP");
}
if((x>(X_FORWARD-range))&&(x<(X_FORWARD+range))&&(y>(Y_FORWARD-range))&&(y<(Y_FORWARD+range))&&(z>(Z_FORWARD-range))&&(z<(Z_FORWARD+range)))
{
PORTB=0b00100100; //forward
     31c:	84 e2       	ldi	r24, 0x24	; 36
     31e:	68 2e       	mov	r6, r24
#define Z_STOP 460
	char buffer[5];

int ReadADC(uint8_t ch)
{
   ADC=0;		
     320:	15 b8       	out	0x05, r1	; 5
     322:	14 b8       	out	0x04, r1	; 4
   //Select ADC Channel ch must be 0-7
   ADMUX = ADMUX & 0b11100000; //ADMUX7,6 is to select VREF and ADCMUX 5 is ADLAR
     324:	87 b1       	in	r24, 0x07	; 7
     326:	80 7e       	andi	r24, 0xE0	; 224
     328:	87 b9       	out	0x07, r24	; 7
   ch=ch&0b00000111;
   ADMUX|=ch;		       // selecting the ADC channel	
     32a:	38 9a       	sbi	0x07, 0	; 7
//Start Single conversion
   ADCSRA |= (1<<ADSC);
     32c:	36 9a       	sbi	0x06, 6	; 6
   //Wait for conversion to complete
   while(!(ADCSRA&(1<<ADIF)));	// ADIF 1 when conversion completes
     32e:	34 9b       	sbis	0x06, 4	; 6
     330:	fe cf       	rjmp	.-4      	; 0x32e <main+0x6a>
//Clear ADIF by writing one to it
ADCSRA|=(1<<ADIF); // thisis how ADIF is cleared
     332:	34 9a       	sbi	0x06, 4	; 6
   return(ADC);
     334:	e4 b0       	in	r14, 0x04	; 4
     336:	f5 b0       	in	r15, 0x05	; 5
#define Z_STOP 460
	char buffer[5];

int ReadADC(uint8_t ch)
{
   ADC=0;		
     338:	15 b8       	out	0x05, r1	; 5
     33a:	14 b8       	out	0x04, r1	; 4
   //Select ADC Channel ch must be 0-7
   ADMUX = ADMUX & 0b11100000; //ADMUX7,6 is to select VREF and ADCMUX 5 is ADLAR
     33c:	87 b1       	in	r24, 0x07	; 7
     33e:	80 7e       	andi	r24, 0xE0	; 224
     340:	87 b9       	out	0x07, r24	; 7
   ch=ch&0b00000111;
   ADMUX|=ch;		       // selecting the ADC channel	
     342:	39 9a       	sbi	0x07, 1	; 7
//Start Single conversion
   ADCSRA |= (1<<ADSC);
     344:	36 9a       	sbi	0x06, 6	; 6
   //Wait for conversion to complete
   while(!(ADCSRA&(1<<ADIF)));	// ADIF 1 when conversion completes
     346:	34 9b       	sbis	0x06, 4	; 6
     348:	fe cf       	rjmp	.-4      	; 0x346 <main+0x82>
//Clear ADIF by writing one to it
ADCSRA|=(1<<ADIF); // thisis how ADIF is cleared
     34a:	34 9a       	sbi	0x06, 4	; 6
   return(ADC);
     34c:	04 b1       	in	r16, 0x04	; 4
     34e:	15 b1       	in	r17, 0x05	; 5
#define Z_STOP 460
	char buffer[5];

int ReadADC(uint8_t ch)
{
   ADC=0;		
     350:	15 b8       	out	0x05, r1	; 5
     352:	14 b8       	out	0x04, r1	; 4
   //Select ADC Channel ch must be 0-7
   ADMUX = ADMUX & 0b11100000; //ADMUX7,6 is to select VREF and ADCMUX 5 is ADLAR
     354:	87 b1       	in	r24, 0x07	; 7
     356:	80 7e       	andi	r24, 0xE0	; 224
     358:	87 b9       	out	0x07, r24	; 7
   ch=ch&0b00000111;
   ADMUX|=ch;		       // selecting the ADC channel	
     35a:	87 b1       	in	r24, 0x07	; 7
     35c:	83 60       	ori	r24, 0x03	; 3
     35e:	87 b9       	out	0x07, r24	; 7
//Start Single conversion
   ADCSRA |= (1<<ADSC);
     360:	36 9a       	sbi	0x06, 6	; 6
   //Wait for conversion to complete
   while(!(ADCSRA&(1<<ADIF)));	// ADIF 1 when conversion completes
     362:	34 9b       	sbis	0x06, 4	; 6
     364:	fe cf       	rjmp	.-4      	; 0x362 <main+0x9e>
//Clear ADIF by writing one to it
ADCSRA|=(1<<ADIF); // thisis how ADIF is cleared
     366:	34 9a       	sbi	0x06, 4	; 6
   return(ADC);
     368:	c4 b1       	in	r28, 0x04	; 4
     36a:	d5 b1       	in	r29, 0x05	; 5
while(1)
{
x=ReadADC(1);
y=ReadADC(2);
z=ReadADC(3);
lcd_gotoxy(0,0);
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	60 e0       	ldi	r22, 0x00	; 0
     370:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_gotoxy>
sprintf(buffer,"x=%4d, y=%4d,\nz=%4d    ",x,y,z);
     374:	8d b7       	in	r24, 0x3d	; 61
     376:	9e b7       	in	r25, 0x3e	; 62
     378:	0a 97       	sbiw	r24, 0x0a	; 10
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	f8 94       	cli
     37e:	9e bf       	out	0x3e, r25	; 62
     380:	0f be       	out	0x3f, r0	; 63
     382:	8d bf       	out	0x3d, r24	; 61
     384:	ed b7       	in	r30, 0x3d	; 61
     386:	fe b7       	in	r31, 0x3e	; 62
     388:	31 96       	adiw	r30, 0x01	; 1
     38a:	ad b7       	in	r26, 0x3d	; 61
     38c:	be b7       	in	r27, 0x3e	; 62
     38e:	12 96       	adiw	r26, 0x02	; 2
     390:	dc 92       	st	X, r13
     392:	ce 92       	st	-X, r12
     394:	11 97       	sbiw	r26, 0x01	; 1
     396:	b3 82       	std	Z+3, r11	; 0x03
     398:	a2 82       	std	Z+2, r10	; 0x02
     39a:	f5 82       	std	Z+5, r15	; 0x05
     39c:	e4 82       	std	Z+4, r14	; 0x04
     39e:	17 83       	std	Z+7, r17	; 0x07
     3a0:	06 83       	std	Z+6, r16	; 0x06
     3a2:	d1 87       	std	Z+9, r29	; 0x09
     3a4:	c0 87       	std	Z+8, r28	; 0x08
     3a6:	0e 94 2e 05 	call	0xa5c	; 0xa5c <sprintf>
lcd_puts(buffer);
     3aa:	8d b7       	in	r24, 0x3d	; 61
     3ac:	9e b7       	in	r25, 0x3e	; 62
     3ae:	0a 96       	adiw	r24, 0x0a	; 10
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	f8 94       	cli
     3b4:	9e bf       	out	0x3e, r25	; 62
     3b6:	0f be       	out	0x3f, r0	; 63
     3b8:	8d bf       	out	0x3d, r24	; 61
     3ba:	c6 01       	movw	r24, r12
     3bc:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_puts>
if((x>(X_STOP-range))&&(x<(X_STOP+range))&&(y>(Y_STOP-range))&&(y<(Y_STOP+range))&&(z>(Z_STOP-range))&&(z<(Z_STOP+range)))
     3c0:	9f e5       	ldi	r25, 0x5F	; 95
     3c2:	e9 16       	cp	r14, r25
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	f9 06       	cpc	r15, r25
     3c8:	f4 f0       	brlt	.+60     	; 0x406 <main+0x142>
     3ca:	aa e9       	ldi	r26, 0x9A	; 154
     3cc:	ea 16       	cp	r14, r26
     3ce:	a1 e0       	ldi	r26, 0x01	; 1
     3d0:	fa 06       	cpc	r15, r26
     3d2:	cc f4       	brge	.+50     	; 0x406 <main+0x142>
     3d4:	b1 e0       	ldi	r27, 0x01	; 1
     3d6:	01 36       	cpi	r16, 0x61	; 97
     3d8:	1b 07       	cpc	r17, r27
     3da:	ac f0       	brlt	.+42     	; 0x406 <main+0x142>
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	0c 39       	cpi	r16, 0x9C	; 156
     3e0:	18 07       	cpc	r17, r24
     3e2:	8c f4       	brge	.+34     	; 0x406 <main+0x142>
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	cf 3a       	cpi	r28, 0xAF	; 175
     3e8:	d9 07       	cpc	r29, r25
     3ea:	6c f0       	brlt	.+26     	; 0x406 <main+0x142>
     3ec:	a1 e0       	ldi	r26, 0x01	; 1
     3ee:	ca 3e       	cpi	r28, 0xEA	; 234
     3f0:	da 07       	cpc	r29, r26
     3f2:	4c f4       	brge	.+18     	; 0x406 <main+0x142>
{
PORTB=0b00000000;// stop
     3f4:	18 ba       	out	0x18, r1	; 24
lcd_gotoxy(8,1);
     3f6:	88 e0       	ldi	r24, 0x08	; 8
     3f8:	61 e0       	ldi	r22, 0x01	; 1
     3fa:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_gotoxy>
lcd_puts("STOP");
     3fe:	88 e7       	ldi	r24, 0x78	; 120
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_puts>
}
if((x>(X_FORWARD-range))&&(x<(X_FORWARD+range))&&(y>(Y_FORWARD-range))&&(y<(Y_FORWARD+range))&&(z>(Z_FORWARD-range))&&(z<(Z_FORWARD+range)))
     406:	b5 ea       	ldi	r27, 0xA5	; 165
     408:	eb 16       	cp	r14, r27
     40a:	b1 e0       	ldi	r27, 0x01	; 1
     40c:	fb 06       	cpc	r15, r27
     40e:	04 f1       	brlt	.+64     	; 0x450 <main+0x18c>
     410:	80 ee       	ldi	r24, 0xE0	; 224
     412:	e8 16       	cp	r14, r24
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	f8 06       	cpc	r15, r24
     418:	0c f0       	brlt	.+2      	; 0x41c <main+0x158>
     41a:	3e c0       	rjmp	.+124    	; 0x498 <__stack+0x39>
     41c:	91 e0       	ldi	r25, 0x01	; 1
     41e:	0f 35       	cpi	r16, 0x5F	; 95
     420:	19 07       	cpc	r17, r25
     422:	d4 f1       	brlt	.+116    	; 0x498 <__stack+0x39>
     424:	a1 e0       	ldi	r26, 0x01	; 1
     426:	0a 39       	cpi	r16, 0x9A	; 154
     428:	1a 07       	cpc	r17, r26
     42a:	b4 f5       	brge	.+108    	; 0x498 <__stack+0x39>
     42c:	b1 e0       	ldi	r27, 0x01	; 1
     42e:	c1 39       	cpi	r28, 0x91	; 145
     430:	db 07       	cpc	r29, r27
     432:	94 f1       	brlt	.+100    	; 0x498 <__stack+0x39>
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	cc 3c       	cpi	r28, 0xCC	; 204
     438:	d8 07       	cpc	r29, r24
     43a:	74 f5       	brge	.+92     	; 0x498 <__stack+0x39>
{
PORTB=0b00100100; //forward
     43c:	68 ba       	out	0x18, r6	; 24
lcd_gotoxy(8,1);
     43e:	88 e0       	ldi	r24, 0x08	; 8
     440:	61 e0       	ldi	r22, 0x01	; 1
     442:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_gotoxy>
lcd_puts("FRWD");
     446:	8d e7       	ldi	r24, 0x7D	; 125
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_puts>
     44e:	24 c0       	rjmp	.+72     	; 0x498 <__stack+0x39>
}
	if((x>(X_BACKWARD-range))&&(x<(X_BACKWARD+range))&&(y>(Y_BACKWARD-range))&&(y<(Y_BACKWARD+range))&&(z>(Z_BACKWARD-range))&&(z<(Z_BACKWARD+range)))
     450:	93 e2       	ldi	r25, 0x23	; 35
     452:	e9 16       	cp	r14, r25
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	f9 06       	cpc	r15, r25
     458:	fc f0       	brlt	.+62     	; 0x498 <__stack+0x39>
     45a:	ae e5       	ldi	r26, 0x5E	; 94
     45c:	ea 16       	cp	r14, r26
     45e:	a1 e0       	ldi	r26, 0x01	; 1
     460:	fa 06       	cpc	r15, r26
     462:	d4 f4       	brge	.+52     	; 0x498 <__stack+0x39>
     464:	b1 e0       	ldi	r27, 0x01	; 1
     466:	0f 35       	cpi	r16, 0x5F	; 95
     468:	1b 07       	cpc	r17, r27
     46a:	0c f4       	brge	.+2      	; 0x46e <__stack+0xf>
     46c:	4b c0       	rjmp	.+150    	; 0x504 <__stack+0xa5>
     46e:	0a 59       	subi	r16, 0x9A	; 154
     470:	11 40       	sbci	r17, 0x01	; 1
     472:	0c f0       	brlt	.+2      	; 0x476 <__stack+0x17>
     474:	47 c0       	rjmp	.+142    	; 0x504 <__stack+0xa5>
     476:	91 e0       	ldi	r25, 0x01	; 1
     478:	cb 39       	cpi	r28, 0x9B	; 155
     47a:	d9 07       	cpc	r29, r25
     47c:	0c f4       	brge	.+2      	; 0x480 <__stack+0x21>
     47e:	42 c0       	rjmp	.+132    	; 0x504 <__stack+0xa5>
     480:	c6 5d       	subi	r28, 0xD6	; 214
     482:	d1 40       	sbci	r29, 0x01	; 1
     484:	0c f0       	brlt	.+2      	; 0x488 <__stack+0x29>
     486:	3e c0       	rjmp	.+124    	; 0x504 <__stack+0xa5>
	{
	PORTB=0b00011000; // back
     488:	78 ba       	out	0x18, r7	; 24
	lcd_gotoxy(8,1);
     48a:	88 e0       	ldi	r24, 0x08	; 8
     48c:	61 e0       	ldi	r22, 0x01	; 1
     48e:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_gotoxy>
	lcd_puts("BACK");
     492:	82 e8       	ldi	r24, 0x82	; 130
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	34 c0       	rjmp	.+104    	; 0x500 <__stack+0xa1>
	}
if((x>(X_LEFT-range))&&(x<(X_LEFT+range))&&(y>(Y_LEFT-range))&&(y<(Y_LEFT+range))&&(z>(Z_LEFT-range))&&(z<(Z_LEFT+range)))
     498:	bf e5       	ldi	r27, 0x5F	; 95
     49a:	eb 16       	cp	r14, r27
     49c:	b1 e0       	ldi	r27, 0x01	; 1
     49e:	fb 06       	cpc	r15, r27
     4a0:	8c f1       	brlt	.+98     	; 0x504 <__stack+0xa5>
     4a2:	8a e9       	ldi	r24, 0x9A	; 154
     4a4:	e8 16       	cp	r14, r24
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	f8 06       	cpc	r15, r24
     4aa:	64 f5       	brge	.+88     	; 0x504 <__stack+0xa5>
     4ac:	91 e0       	ldi	r25, 0x01	; 1
     4ae:	05 3a       	cpi	r16, 0xA5	; 165
     4b0:	19 07       	cpc	r17, r25
     4b2:	a4 f1       	brlt	.+104    	; 0x51c <__stack+0xbd>
     4b4:	a1 e0       	ldi	r26, 0x01	; 1
     4b6:	00 3e       	cpi	r16, 0xE0	; 224
     4b8:	1a 07       	cpc	r17, r26
     4ba:	8c f4       	brge	.+34     	; 0x4de <__stack+0x7f>
     4bc:	b1 e0       	ldi	r27, 0x01	; 1
     4be:	c1 39       	cpi	r28, 0x91	; 145
     4c0:	db 07       	cpc	r29, r27
     4c2:	6c f0       	brlt	.+26     	; 0x4de <__stack+0x7f>
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	cc 3c       	cpi	r28, 0xCC	; 204
     4c8:	d8 07       	cpc	r29, r24
     4ca:	4c f4       	brge	.+18     	; 0x4de <__stack+0x7f>
{
PORTB=0b00000100; // left
     4cc:	48 ba       	out	0x18, r4	; 24
lcd_gotoxy(8,1);
     4ce:	88 e0       	ldi	r24, 0x08	; 8
     4d0:	61 e0       	ldi	r22, 0x01	; 1
     4d2:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_gotoxy>
lcd_puts("LEFT");
     4d6:	87 e8       	ldi	r24, 0x87	; 135
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_puts>
}
	if((x>(X_RIGHT-range))&&(x<(X_RIGHT+range))&&(y>(Y_RIGHT-range))&&(y<(Y_RIGHT+range))&&(z>(Z_RIGHT-range))&&(z<(Z_RIGHT+range)))
     4de:	08 56       	subi	r16, 0x68	; 104
     4e0:	11 40       	sbci	r17, 0x01	; 1
     4e2:	84 f4       	brge	.+32     	; 0x504 <__stack+0xa5>
     4e4:	a1 e0       	ldi	r26, 0x01	; 1
     4e6:	cb 39       	cpi	r28, 0x9B	; 155
     4e8:	da 07       	cpc	r29, r26
     4ea:	64 f0       	brlt	.+24     	; 0x504 <__stack+0xa5>
     4ec:	c6 5d       	subi	r28, 0xD6	; 214
     4ee:	d1 40       	sbci	r29, 0x01	; 1
     4f0:	4c f4       	brge	.+18     	; 0x504 <__stack+0xa5>
	{
	PORTB=0b00100000; // right
     4f2:	58 ba       	out	0x18, r5	; 24
	lcd_gotoxy(8,1);
     4f4:	88 e0       	ldi	r24, 0x08	; 8
     4f6:	61 e0       	ldi	r22, 0x01	; 1
     4f8:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_gotoxy>
	lcd_puts("RIGHT");
     4fc:	8c e8       	ldi	r24, 0x8C	; 140
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_puts>
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	f4 01       	movw	r30, r8
     50a:	31 97       	sbiw	r30, 0x01	; 1
     50c:	f1 f7       	brne	.-4      	; 0x50a <__stack+0xab>
		ADCSRA=(1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS1); //Prescalar div factor =128
		}
	void wait(float x)
		{
		int i;
		for(i=0;i<(int)(61*x);i++)
     50e:	01 96       	adiw	r24, 0x01	; 1
     510:	82 31       	cpi	r24, 0x12	; 18
     512:	91 05       	cpc	r25, r1
     514:	c9 f7       	brne	.-14     	; 0x508 <__stack+0xa9>
	PORTB=0b00100000; // right
	lcd_gotoxy(8,1);
	lcd_puts("RIGHT");
	}
wait(.30);
lcd_clrscr();
     516:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_clrscr>
     51a:	02 cf       	rjmp	.-508    	; 0x320 <main+0x5c>
{
PORTB=0b00000100; // left
lcd_gotoxy(8,1);
lcd_puts("LEFT");
}
	if((x>(X_RIGHT-range))&&(x<(X_RIGHT+range))&&(y>(Y_RIGHT-range))&&(y<(Y_RIGHT+range))&&(z>(Z_RIGHT-range))&&(z<(Z_RIGHT+range)))
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	0d 32       	cpi	r16, 0x2D	; 45
     520:	18 07       	cpc	r17, r24
     522:	84 f3       	brlt	.-32     	; 0x504 <__stack+0xa5>
     524:	dc cf       	rjmp	.-72     	; 0x4de <__stack+0x7f>

00000526 <__mulsf3>:
     526:	a0 e2       	ldi	r26, 0x20	; 32
     528:	b0 e0       	ldi	r27, 0x00	; 0
     52a:	e9 e9       	ldi	r30, 0x99	; 153
     52c:	f2 e0       	ldi	r31, 0x02	; 2
     52e:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <__prologue_saves__>
     532:	69 83       	std	Y+1, r22	; 0x01
     534:	7a 83       	std	Y+2, r23	; 0x02
     536:	8b 83       	std	Y+3, r24	; 0x03
     538:	9c 83       	std	Y+4, r25	; 0x04
     53a:	2d 83       	std	Y+5, r18	; 0x05
     53c:	3e 83       	std	Y+6, r19	; 0x06
     53e:	4f 83       	std	Y+7, r20	; 0x07
     540:	58 87       	std	Y+8, r21	; 0x08
     542:	ce 01       	movw	r24, r28
     544:	01 96       	adiw	r24, 0x01	; 1
     546:	be 01       	movw	r22, r28
     548:	67 5f       	subi	r22, 0xF7	; 247
     54a:	7f 4f       	sbci	r23, 0xFF	; 255
     54c:	0e 94 b6 04 	call	0x96c	; 0x96c <__unpack_f>
     550:	ce 01       	movw	r24, r28
     552:	05 96       	adiw	r24, 0x05	; 5
     554:	be 01       	movw	r22, r28
     556:	6f 5e       	subi	r22, 0xEF	; 239
     558:	7f 4f       	sbci	r23, 0xFF	; 255
     55a:	0e 94 b6 04 	call	0x96c	; 0x96c <__unpack_f>
     55e:	99 85       	ldd	r25, Y+9	; 0x09
     560:	92 30       	cpi	r25, 0x02	; 2
     562:	88 f0       	brcs	.+34     	; 0x586 <__mulsf3+0x60>
     564:	89 89       	ldd	r24, Y+17	; 0x11
     566:	82 30       	cpi	r24, 0x02	; 2
     568:	c8 f0       	brcs	.+50     	; 0x59c <__mulsf3+0x76>
     56a:	94 30       	cpi	r25, 0x04	; 4
     56c:	19 f4       	brne	.+6      	; 0x574 <__mulsf3+0x4e>
     56e:	82 30       	cpi	r24, 0x02	; 2
     570:	51 f4       	brne	.+20     	; 0x586 <__mulsf3+0x60>
     572:	04 c0       	rjmp	.+8      	; 0x57c <__mulsf3+0x56>
     574:	84 30       	cpi	r24, 0x04	; 4
     576:	29 f4       	brne	.+10     	; 0x582 <__mulsf3+0x5c>
     578:	92 30       	cpi	r25, 0x02	; 2
     57a:	81 f4       	brne	.+32     	; 0x59c <__mulsf3+0x76>
     57c:	82 e9       	ldi	r24, 0x92	; 146
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	c6 c0       	rjmp	.+396    	; 0x70e <__mulsf3+0x1e8>
     582:	92 30       	cpi	r25, 0x02	; 2
     584:	49 f4       	brne	.+18     	; 0x598 <__mulsf3+0x72>
     586:	20 e0       	ldi	r18, 0x00	; 0
     588:	9a 85       	ldd	r25, Y+10	; 0x0a
     58a:	8a 89       	ldd	r24, Y+18	; 0x12
     58c:	98 13       	cpse	r25, r24
     58e:	21 e0       	ldi	r18, 0x01	; 1
     590:	2a 87       	std	Y+10, r18	; 0x0a
     592:	ce 01       	movw	r24, r28
     594:	09 96       	adiw	r24, 0x09	; 9
     596:	bb c0       	rjmp	.+374    	; 0x70e <__mulsf3+0x1e8>
     598:	82 30       	cpi	r24, 0x02	; 2
     59a:	49 f4       	brne	.+18     	; 0x5ae <__mulsf3+0x88>
     59c:	20 e0       	ldi	r18, 0x00	; 0
     59e:	9a 85       	ldd	r25, Y+10	; 0x0a
     5a0:	8a 89       	ldd	r24, Y+18	; 0x12
     5a2:	98 13       	cpse	r25, r24
     5a4:	21 e0       	ldi	r18, 0x01	; 1
     5a6:	2a 8b       	std	Y+18, r18	; 0x12
     5a8:	ce 01       	movw	r24, r28
     5aa:	41 96       	adiw	r24, 0x11	; 17
     5ac:	b0 c0       	rjmp	.+352    	; 0x70e <__mulsf3+0x1e8>
     5ae:	2d 84       	ldd	r2, Y+13	; 0x0d
     5b0:	3e 84       	ldd	r3, Y+14	; 0x0e
     5b2:	4f 84       	ldd	r4, Y+15	; 0x0f
     5b4:	58 88       	ldd	r5, Y+16	; 0x10
     5b6:	6d 88       	ldd	r6, Y+21	; 0x15
     5b8:	7e 88       	ldd	r7, Y+22	; 0x16
     5ba:	8f 88       	ldd	r8, Y+23	; 0x17
     5bc:	98 8c       	ldd	r9, Y+24	; 0x18
     5be:	ee 24       	eor	r14, r14
     5c0:	ff 24       	eor	r15, r15
     5c2:	87 01       	movw	r16, r14
     5c4:	aa 24       	eor	r10, r10
     5c6:	bb 24       	eor	r11, r11
     5c8:	65 01       	movw	r12, r10
     5ca:	40 e0       	ldi	r20, 0x00	; 0
     5cc:	50 e0       	ldi	r21, 0x00	; 0
     5ce:	60 e0       	ldi	r22, 0x00	; 0
     5d0:	70 e0       	ldi	r23, 0x00	; 0
     5d2:	e0 e0       	ldi	r30, 0x00	; 0
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	c1 01       	movw	r24, r2
     5d8:	81 70       	andi	r24, 0x01	; 1
     5da:	90 70       	andi	r25, 0x00	; 0
     5dc:	89 2b       	or	r24, r25
     5de:	e9 f0       	breq	.+58     	; 0x61a <__mulsf3+0xf4>
     5e0:	e6 0c       	add	r14, r6
     5e2:	f7 1c       	adc	r15, r7
     5e4:	08 1d       	adc	r16, r8
     5e6:	19 1d       	adc	r17, r9
     5e8:	9a 01       	movw	r18, r20
     5ea:	ab 01       	movw	r20, r22
     5ec:	2a 0d       	add	r18, r10
     5ee:	3b 1d       	adc	r19, r11
     5f0:	4c 1d       	adc	r20, r12
     5f2:	5d 1d       	adc	r21, r13
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	a0 e0       	ldi	r26, 0x00	; 0
     5fa:	b0 e0       	ldi	r27, 0x00	; 0
     5fc:	e6 14       	cp	r14, r6
     5fe:	f7 04       	cpc	r15, r7
     600:	08 05       	cpc	r16, r8
     602:	19 05       	cpc	r17, r9
     604:	20 f4       	brcc	.+8      	; 0x60e <__mulsf3+0xe8>
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	ba 01       	movw	r22, r20
     610:	a9 01       	movw	r20, r18
     612:	48 0f       	add	r20, r24
     614:	59 1f       	adc	r21, r25
     616:	6a 1f       	adc	r22, r26
     618:	7b 1f       	adc	r23, r27
     61a:	aa 0c       	add	r10, r10
     61c:	bb 1c       	adc	r11, r11
     61e:	cc 1c       	adc	r12, r12
     620:	dd 1c       	adc	r13, r13
     622:	97 fe       	sbrs	r9, 7
     624:	08 c0       	rjmp	.+16     	; 0x636 <__mulsf3+0x110>
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	a0 e0       	ldi	r26, 0x00	; 0
     62c:	b0 e0       	ldi	r27, 0x00	; 0
     62e:	a8 2a       	or	r10, r24
     630:	b9 2a       	or	r11, r25
     632:	ca 2a       	or	r12, r26
     634:	db 2a       	or	r13, r27
     636:	31 96       	adiw	r30, 0x01	; 1
     638:	e0 32       	cpi	r30, 0x20	; 32
     63a:	f1 05       	cpc	r31, r1
     63c:	49 f0       	breq	.+18     	; 0x650 <__mulsf3+0x12a>
     63e:	66 0c       	add	r6, r6
     640:	77 1c       	adc	r7, r7
     642:	88 1c       	adc	r8, r8
     644:	99 1c       	adc	r9, r9
     646:	56 94       	lsr	r5
     648:	47 94       	ror	r4
     64a:	37 94       	ror	r3
     64c:	27 94       	ror	r2
     64e:	c3 cf       	rjmp	.-122    	; 0x5d6 <__mulsf3+0xb0>
     650:	fa 85       	ldd	r31, Y+10	; 0x0a
     652:	ea 89       	ldd	r30, Y+18	; 0x12
     654:	2b 89       	ldd	r18, Y+19	; 0x13
     656:	3c 89       	ldd	r19, Y+20	; 0x14
     658:	8b 85       	ldd	r24, Y+11	; 0x0b
     65a:	9c 85       	ldd	r25, Y+12	; 0x0c
     65c:	28 0f       	add	r18, r24
     65e:	39 1f       	adc	r19, r25
     660:	2e 5f       	subi	r18, 0xFE	; 254
     662:	3f 4f       	sbci	r19, 0xFF	; 255
     664:	17 c0       	rjmp	.+46     	; 0x694 <__mulsf3+0x16e>
     666:	ca 01       	movw	r24, r20
     668:	81 70       	andi	r24, 0x01	; 1
     66a:	90 70       	andi	r25, 0x00	; 0
     66c:	89 2b       	or	r24, r25
     66e:	61 f0       	breq	.+24     	; 0x688 <__mulsf3+0x162>
     670:	16 95       	lsr	r17
     672:	07 95       	ror	r16
     674:	f7 94       	ror	r15
     676:	e7 94       	ror	r14
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	a0 e0       	ldi	r26, 0x00	; 0
     67e:	b0 e8       	ldi	r27, 0x80	; 128
     680:	e8 2a       	or	r14, r24
     682:	f9 2a       	or	r15, r25
     684:	0a 2b       	or	r16, r26
     686:	1b 2b       	or	r17, r27
     688:	76 95       	lsr	r23
     68a:	67 95       	ror	r22
     68c:	57 95       	ror	r21
     68e:	47 95       	ror	r20
     690:	2f 5f       	subi	r18, 0xFF	; 255
     692:	3f 4f       	sbci	r19, 0xFF	; 255
     694:	77 fd       	sbrc	r23, 7
     696:	e7 cf       	rjmp	.-50     	; 0x666 <__mulsf3+0x140>
     698:	0c c0       	rjmp	.+24     	; 0x6b2 <__mulsf3+0x18c>
     69a:	44 0f       	add	r20, r20
     69c:	55 1f       	adc	r21, r21
     69e:	66 1f       	adc	r22, r22
     6a0:	77 1f       	adc	r23, r23
     6a2:	17 fd       	sbrc	r17, 7
     6a4:	41 60       	ori	r20, 0x01	; 1
     6a6:	ee 0c       	add	r14, r14
     6a8:	ff 1c       	adc	r15, r15
     6aa:	00 1f       	adc	r16, r16
     6ac:	11 1f       	adc	r17, r17
     6ae:	21 50       	subi	r18, 0x01	; 1
     6b0:	30 40       	sbci	r19, 0x00	; 0
     6b2:	40 30       	cpi	r20, 0x00	; 0
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	59 07       	cpc	r21, r25
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	69 07       	cpc	r22, r25
     6bc:	90 e4       	ldi	r25, 0x40	; 64
     6be:	79 07       	cpc	r23, r25
     6c0:	60 f3       	brcs	.-40     	; 0x69a <__mulsf3+0x174>
     6c2:	2b 8f       	std	Y+27, r18	; 0x1b
     6c4:	3c 8f       	std	Y+28, r19	; 0x1c
     6c6:	db 01       	movw	r26, r22
     6c8:	ca 01       	movw	r24, r20
     6ca:	8f 77       	andi	r24, 0x7F	; 127
     6cc:	90 70       	andi	r25, 0x00	; 0
     6ce:	a0 70       	andi	r26, 0x00	; 0
     6d0:	b0 70       	andi	r27, 0x00	; 0
     6d2:	80 34       	cpi	r24, 0x40	; 64
     6d4:	91 05       	cpc	r25, r1
     6d6:	a1 05       	cpc	r26, r1
     6d8:	b1 05       	cpc	r27, r1
     6da:	61 f4       	brne	.+24     	; 0x6f4 <__mulsf3+0x1ce>
     6dc:	47 fd       	sbrc	r20, 7
     6de:	0a c0       	rjmp	.+20     	; 0x6f4 <__mulsf3+0x1ce>
     6e0:	e1 14       	cp	r14, r1
     6e2:	f1 04       	cpc	r15, r1
     6e4:	01 05       	cpc	r16, r1
     6e6:	11 05       	cpc	r17, r1
     6e8:	29 f0       	breq	.+10     	; 0x6f4 <__mulsf3+0x1ce>
     6ea:	40 5c       	subi	r20, 0xC0	; 192
     6ec:	5f 4f       	sbci	r21, 0xFF	; 255
     6ee:	6f 4f       	sbci	r22, 0xFF	; 255
     6f0:	7f 4f       	sbci	r23, 0xFF	; 255
     6f2:	40 78       	andi	r20, 0x80	; 128
     6f4:	1a 8e       	std	Y+26, r1	; 0x1a
     6f6:	fe 17       	cp	r31, r30
     6f8:	11 f0       	breq	.+4      	; 0x6fe <__mulsf3+0x1d8>
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	8a 8f       	std	Y+26, r24	; 0x1a
     6fe:	4d 8f       	std	Y+29, r20	; 0x1d
     700:	5e 8f       	std	Y+30, r21	; 0x1e
     702:	6f 8f       	std	Y+31, r22	; 0x1f
     704:	78 a3       	std	Y+32, r23	; 0x20
     706:	83 e0       	ldi	r24, 0x03	; 3
     708:	89 8f       	std	Y+25, r24	; 0x19
     70a:	ce 01       	movw	r24, r28
     70c:	49 96       	adiw	r24, 0x19	; 25
     70e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__pack_f>
     712:	a0 96       	adiw	r28, 0x20	; 32
     714:	e2 e1       	ldi	r30, 0x12	; 18
     716:	0c 94 eb 07 	jmp	0xfd6	; 0xfd6 <__epilogue_restores__>

0000071a <__fixsfsi>:
     71a:	ac e0       	ldi	r26, 0x0C	; 12
     71c:	b0 e0       	ldi	r27, 0x00	; 0
     71e:	e3 e9       	ldi	r30, 0x93	; 147
     720:	f3 e0       	ldi	r31, 0x03	; 3
     722:	0c 94 df 07 	jmp	0xfbe	; 0xfbe <__prologue_saves__+0x20>
     726:	69 83       	std	Y+1, r22	; 0x01
     728:	7a 83       	std	Y+2, r23	; 0x02
     72a:	8b 83       	std	Y+3, r24	; 0x03
     72c:	9c 83       	std	Y+4, r25	; 0x04
     72e:	ce 01       	movw	r24, r28
     730:	01 96       	adiw	r24, 0x01	; 1
     732:	be 01       	movw	r22, r28
     734:	6b 5f       	subi	r22, 0xFB	; 251
     736:	7f 4f       	sbci	r23, 0xFF	; 255
     738:	0e 94 b6 04 	call	0x96c	; 0x96c <__unpack_f>
     73c:	8d 81       	ldd	r24, Y+5	; 0x05
     73e:	82 30       	cpi	r24, 0x02	; 2
     740:	61 f1       	breq	.+88     	; 0x79a <__fixsfsi+0x80>
     742:	82 30       	cpi	r24, 0x02	; 2
     744:	50 f1       	brcs	.+84     	; 0x79a <__fixsfsi+0x80>
     746:	84 30       	cpi	r24, 0x04	; 4
     748:	21 f4       	brne	.+8      	; 0x752 <__fixsfsi+0x38>
     74a:	8e 81       	ldd	r24, Y+6	; 0x06
     74c:	88 23       	and	r24, r24
     74e:	51 f1       	breq	.+84     	; 0x7a4 <__fixsfsi+0x8a>
     750:	2e c0       	rjmp	.+92     	; 0x7ae <__fixsfsi+0x94>
     752:	2f 81       	ldd	r18, Y+7	; 0x07
     754:	38 85       	ldd	r19, Y+8	; 0x08
     756:	37 fd       	sbrc	r19, 7
     758:	20 c0       	rjmp	.+64     	; 0x79a <__fixsfsi+0x80>
     75a:	6e 81       	ldd	r22, Y+6	; 0x06
     75c:	2f 31       	cpi	r18, 0x1F	; 31
     75e:	31 05       	cpc	r19, r1
     760:	1c f0       	brlt	.+6      	; 0x768 <__fixsfsi+0x4e>
     762:	66 23       	and	r22, r22
     764:	f9 f0       	breq	.+62     	; 0x7a4 <__fixsfsi+0x8a>
     766:	23 c0       	rjmp	.+70     	; 0x7ae <__fixsfsi+0x94>
     768:	8e e1       	ldi	r24, 0x1E	; 30
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	82 1b       	sub	r24, r18
     76e:	93 0b       	sbc	r25, r19
     770:	29 85       	ldd	r18, Y+9	; 0x09
     772:	3a 85       	ldd	r19, Y+10	; 0x0a
     774:	4b 85       	ldd	r20, Y+11	; 0x0b
     776:	5c 85       	ldd	r21, Y+12	; 0x0c
     778:	04 c0       	rjmp	.+8      	; 0x782 <__fixsfsi+0x68>
     77a:	56 95       	lsr	r21
     77c:	47 95       	ror	r20
     77e:	37 95       	ror	r19
     780:	27 95       	ror	r18
     782:	8a 95       	dec	r24
     784:	d2 f7       	brpl	.-12     	; 0x77a <__fixsfsi+0x60>
     786:	66 23       	and	r22, r22
     788:	b1 f0       	breq	.+44     	; 0x7b6 <__fixsfsi+0x9c>
     78a:	50 95       	com	r21
     78c:	40 95       	com	r20
     78e:	30 95       	com	r19
     790:	21 95       	neg	r18
     792:	3f 4f       	sbci	r19, 0xFF	; 255
     794:	4f 4f       	sbci	r20, 0xFF	; 255
     796:	5f 4f       	sbci	r21, 0xFF	; 255
     798:	0e c0       	rjmp	.+28     	; 0x7b6 <__fixsfsi+0x9c>
     79a:	20 e0       	ldi	r18, 0x00	; 0
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	40 e0       	ldi	r20, 0x00	; 0
     7a0:	50 e0       	ldi	r21, 0x00	; 0
     7a2:	09 c0       	rjmp	.+18     	; 0x7b6 <__fixsfsi+0x9c>
     7a4:	2f ef       	ldi	r18, 0xFF	; 255
     7a6:	3f ef       	ldi	r19, 0xFF	; 255
     7a8:	4f ef       	ldi	r20, 0xFF	; 255
     7aa:	5f e7       	ldi	r21, 0x7F	; 127
     7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <__fixsfsi+0x9c>
     7ae:	20 e0       	ldi	r18, 0x00	; 0
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	40 e0       	ldi	r20, 0x00	; 0
     7b4:	50 e8       	ldi	r21, 0x80	; 128
     7b6:	b9 01       	movw	r22, r18
     7b8:	ca 01       	movw	r24, r20
     7ba:	2c 96       	adiw	r28, 0x0c	; 12
     7bc:	e2 e0       	ldi	r30, 0x02	; 2
     7be:	0c 94 fb 07 	jmp	0xff6	; 0xff6 <__epilogue_restores__+0x20>

000007c2 <__pack_f>:
     7c2:	df 92       	push	r13
     7c4:	ef 92       	push	r14
     7c6:	ff 92       	push	r15
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	fc 01       	movw	r30, r24
     7ce:	e4 80       	ldd	r14, Z+4	; 0x04
     7d0:	f5 80       	ldd	r15, Z+5	; 0x05
     7d2:	06 81       	ldd	r16, Z+6	; 0x06
     7d4:	17 81       	ldd	r17, Z+7	; 0x07
     7d6:	d1 80       	ldd	r13, Z+1	; 0x01
     7d8:	80 81       	ld	r24, Z
     7da:	82 30       	cpi	r24, 0x02	; 2
     7dc:	48 f4       	brcc	.+18     	; 0x7f0 <__pack_f+0x2e>
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	a0 e1       	ldi	r26, 0x10	; 16
     7e4:	b0 e0       	ldi	r27, 0x00	; 0
     7e6:	e8 2a       	or	r14, r24
     7e8:	f9 2a       	or	r15, r25
     7ea:	0a 2b       	or	r16, r26
     7ec:	1b 2b       	or	r17, r27
     7ee:	a5 c0       	rjmp	.+330    	; 0x93a <__pack_f+0x178>
     7f0:	84 30       	cpi	r24, 0x04	; 4
     7f2:	09 f4       	brne	.+2      	; 0x7f6 <__pack_f+0x34>
     7f4:	9f c0       	rjmp	.+318    	; 0x934 <__pack_f+0x172>
     7f6:	82 30       	cpi	r24, 0x02	; 2
     7f8:	21 f4       	brne	.+8      	; 0x802 <__pack_f+0x40>
     7fa:	ee 24       	eor	r14, r14
     7fc:	ff 24       	eor	r15, r15
     7fe:	87 01       	movw	r16, r14
     800:	05 c0       	rjmp	.+10     	; 0x80c <__pack_f+0x4a>
     802:	e1 14       	cp	r14, r1
     804:	f1 04       	cpc	r15, r1
     806:	01 05       	cpc	r16, r1
     808:	11 05       	cpc	r17, r1
     80a:	19 f4       	brne	.+6      	; 0x812 <__pack_f+0x50>
     80c:	e0 e0       	ldi	r30, 0x00	; 0
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	96 c0       	rjmp	.+300    	; 0x93e <__pack_f+0x17c>
     812:	62 81       	ldd	r22, Z+2	; 0x02
     814:	73 81       	ldd	r23, Z+3	; 0x03
     816:	9f ef       	ldi	r25, 0xFF	; 255
     818:	62 38       	cpi	r22, 0x82	; 130
     81a:	79 07       	cpc	r23, r25
     81c:	0c f0       	brlt	.+2      	; 0x820 <__pack_f+0x5e>
     81e:	5b c0       	rjmp	.+182    	; 0x8d6 <__pack_f+0x114>
     820:	22 e8       	ldi	r18, 0x82	; 130
     822:	3f ef       	ldi	r19, 0xFF	; 255
     824:	26 1b       	sub	r18, r22
     826:	37 0b       	sbc	r19, r23
     828:	2a 31       	cpi	r18, 0x1A	; 26
     82a:	31 05       	cpc	r19, r1
     82c:	2c f0       	brlt	.+10     	; 0x838 <__pack_f+0x76>
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	40 e0       	ldi	r20, 0x00	; 0
     834:	50 e0       	ldi	r21, 0x00	; 0
     836:	2a c0       	rjmp	.+84     	; 0x88c <__pack_f+0xca>
     838:	b8 01       	movw	r22, r16
     83a:	a7 01       	movw	r20, r14
     83c:	02 2e       	mov	r0, r18
     83e:	04 c0       	rjmp	.+8      	; 0x848 <__pack_f+0x86>
     840:	76 95       	lsr	r23
     842:	67 95       	ror	r22
     844:	57 95       	ror	r21
     846:	47 95       	ror	r20
     848:	0a 94       	dec	r0
     84a:	d2 f7       	brpl	.-12     	; 0x840 <__pack_f+0x7e>
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	a0 e0       	ldi	r26, 0x00	; 0
     852:	b0 e0       	ldi	r27, 0x00	; 0
     854:	04 c0       	rjmp	.+8      	; 0x85e <__pack_f+0x9c>
     856:	88 0f       	add	r24, r24
     858:	99 1f       	adc	r25, r25
     85a:	aa 1f       	adc	r26, r26
     85c:	bb 1f       	adc	r27, r27
     85e:	2a 95       	dec	r18
     860:	d2 f7       	brpl	.-12     	; 0x856 <__pack_f+0x94>
     862:	01 97       	sbiw	r24, 0x01	; 1
     864:	a1 09       	sbc	r26, r1
     866:	b1 09       	sbc	r27, r1
     868:	8e 21       	and	r24, r14
     86a:	9f 21       	and	r25, r15
     86c:	a0 23       	and	r26, r16
     86e:	b1 23       	and	r27, r17
     870:	00 97       	sbiw	r24, 0x00	; 0
     872:	a1 05       	cpc	r26, r1
     874:	b1 05       	cpc	r27, r1
     876:	21 f0       	breq	.+8      	; 0x880 <__pack_f+0xbe>
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	a0 e0       	ldi	r26, 0x00	; 0
     87e:	b0 e0       	ldi	r27, 0x00	; 0
     880:	9a 01       	movw	r18, r20
     882:	ab 01       	movw	r20, r22
     884:	28 2b       	or	r18, r24
     886:	39 2b       	or	r19, r25
     888:	4a 2b       	or	r20, r26
     88a:	5b 2b       	or	r21, r27
     88c:	da 01       	movw	r26, r20
     88e:	c9 01       	movw	r24, r18
     890:	8f 77       	andi	r24, 0x7F	; 127
     892:	90 70       	andi	r25, 0x00	; 0
     894:	a0 70       	andi	r26, 0x00	; 0
     896:	b0 70       	andi	r27, 0x00	; 0
     898:	80 34       	cpi	r24, 0x40	; 64
     89a:	91 05       	cpc	r25, r1
     89c:	a1 05       	cpc	r26, r1
     89e:	b1 05       	cpc	r27, r1
     8a0:	39 f4       	brne	.+14     	; 0x8b0 <__pack_f+0xee>
     8a2:	27 ff       	sbrs	r18, 7
     8a4:	09 c0       	rjmp	.+18     	; 0x8b8 <__pack_f+0xf6>
     8a6:	20 5c       	subi	r18, 0xC0	; 192
     8a8:	3f 4f       	sbci	r19, 0xFF	; 255
     8aa:	4f 4f       	sbci	r20, 0xFF	; 255
     8ac:	5f 4f       	sbci	r21, 0xFF	; 255
     8ae:	04 c0       	rjmp	.+8      	; 0x8b8 <__pack_f+0xf6>
     8b0:	21 5c       	subi	r18, 0xC1	; 193
     8b2:	3f 4f       	sbci	r19, 0xFF	; 255
     8b4:	4f 4f       	sbci	r20, 0xFF	; 255
     8b6:	5f 4f       	sbci	r21, 0xFF	; 255
     8b8:	e0 e0       	ldi	r30, 0x00	; 0
     8ba:	f0 e0       	ldi	r31, 0x00	; 0
     8bc:	20 30       	cpi	r18, 0x00	; 0
     8be:	a0 e0       	ldi	r26, 0x00	; 0
     8c0:	3a 07       	cpc	r19, r26
     8c2:	a0 e0       	ldi	r26, 0x00	; 0
     8c4:	4a 07       	cpc	r20, r26
     8c6:	a0 e4       	ldi	r26, 0x40	; 64
     8c8:	5a 07       	cpc	r21, r26
     8ca:	10 f0       	brcs	.+4      	; 0x8d0 <__pack_f+0x10e>
     8cc:	e1 e0       	ldi	r30, 0x01	; 1
     8ce:	f0 e0       	ldi	r31, 0x00	; 0
     8d0:	79 01       	movw	r14, r18
     8d2:	8a 01       	movw	r16, r20
     8d4:	27 c0       	rjmp	.+78     	; 0x924 <__pack_f+0x162>
     8d6:	60 38       	cpi	r22, 0x80	; 128
     8d8:	71 05       	cpc	r23, r1
     8da:	64 f5       	brge	.+88     	; 0x934 <__pack_f+0x172>
     8dc:	fb 01       	movw	r30, r22
     8de:	e1 58       	subi	r30, 0x81	; 129
     8e0:	ff 4f       	sbci	r31, 0xFF	; 255
     8e2:	d8 01       	movw	r26, r16
     8e4:	c7 01       	movw	r24, r14
     8e6:	8f 77       	andi	r24, 0x7F	; 127
     8e8:	90 70       	andi	r25, 0x00	; 0
     8ea:	a0 70       	andi	r26, 0x00	; 0
     8ec:	b0 70       	andi	r27, 0x00	; 0
     8ee:	80 34       	cpi	r24, 0x40	; 64
     8f0:	91 05       	cpc	r25, r1
     8f2:	a1 05       	cpc	r26, r1
     8f4:	b1 05       	cpc	r27, r1
     8f6:	39 f4       	brne	.+14     	; 0x906 <__pack_f+0x144>
     8f8:	e7 fe       	sbrs	r14, 7
     8fa:	0d c0       	rjmp	.+26     	; 0x916 <__pack_f+0x154>
     8fc:	80 e4       	ldi	r24, 0x40	; 64
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__pack_f+0x14c>
     906:	8f e3       	ldi	r24, 0x3F	; 63
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	a0 e0       	ldi	r26, 0x00	; 0
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	e8 0e       	add	r14, r24
     910:	f9 1e       	adc	r15, r25
     912:	0a 1f       	adc	r16, r26
     914:	1b 1f       	adc	r17, r27
     916:	17 ff       	sbrs	r17, 7
     918:	05 c0       	rjmp	.+10     	; 0x924 <__pack_f+0x162>
     91a:	16 95       	lsr	r17
     91c:	07 95       	ror	r16
     91e:	f7 94       	ror	r15
     920:	e7 94       	ror	r14
     922:	31 96       	adiw	r30, 0x01	; 1
     924:	87 e0       	ldi	r24, 0x07	; 7
     926:	16 95       	lsr	r17
     928:	07 95       	ror	r16
     92a:	f7 94       	ror	r15
     92c:	e7 94       	ror	r14
     92e:	8a 95       	dec	r24
     930:	d1 f7       	brne	.-12     	; 0x926 <__pack_f+0x164>
     932:	05 c0       	rjmp	.+10     	; 0x93e <__pack_f+0x17c>
     934:	ee 24       	eor	r14, r14
     936:	ff 24       	eor	r15, r15
     938:	87 01       	movw	r16, r14
     93a:	ef ef       	ldi	r30, 0xFF	; 255
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	6e 2f       	mov	r22, r30
     940:	67 95       	ror	r22
     942:	66 27       	eor	r22, r22
     944:	67 95       	ror	r22
     946:	90 2f       	mov	r25, r16
     948:	9f 77       	andi	r25, 0x7F	; 127
     94a:	d7 94       	ror	r13
     94c:	dd 24       	eor	r13, r13
     94e:	d7 94       	ror	r13
     950:	8e 2f       	mov	r24, r30
     952:	86 95       	lsr	r24
     954:	49 2f       	mov	r20, r25
     956:	46 2b       	or	r20, r22
     958:	58 2f       	mov	r21, r24
     95a:	5d 29       	or	r21, r13
     95c:	b7 01       	movw	r22, r14
     95e:	ca 01       	movw	r24, r20
     960:	1f 91       	pop	r17
     962:	0f 91       	pop	r16
     964:	ff 90       	pop	r15
     966:	ef 90       	pop	r14
     968:	df 90       	pop	r13
     96a:	08 95       	ret

0000096c <__unpack_f>:
     96c:	fc 01       	movw	r30, r24
     96e:	db 01       	movw	r26, r22
     970:	40 81       	ld	r20, Z
     972:	51 81       	ldd	r21, Z+1	; 0x01
     974:	22 81       	ldd	r18, Z+2	; 0x02
     976:	62 2f       	mov	r22, r18
     978:	6f 77       	andi	r22, 0x7F	; 127
     97a:	70 e0       	ldi	r23, 0x00	; 0
     97c:	22 1f       	adc	r18, r18
     97e:	22 27       	eor	r18, r18
     980:	22 1f       	adc	r18, r18
     982:	93 81       	ldd	r25, Z+3	; 0x03
     984:	89 2f       	mov	r24, r25
     986:	88 0f       	add	r24, r24
     988:	82 2b       	or	r24, r18
     98a:	28 2f       	mov	r18, r24
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	99 1f       	adc	r25, r25
     990:	99 27       	eor	r25, r25
     992:	99 1f       	adc	r25, r25
     994:	11 96       	adiw	r26, 0x01	; 1
     996:	9c 93       	st	X, r25
     998:	11 97       	sbiw	r26, 0x01	; 1
     99a:	21 15       	cp	r18, r1
     99c:	31 05       	cpc	r19, r1
     99e:	a9 f5       	brne	.+106    	; 0xa0a <__unpack_f+0x9e>
     9a0:	41 15       	cp	r20, r1
     9a2:	51 05       	cpc	r21, r1
     9a4:	61 05       	cpc	r22, r1
     9a6:	71 05       	cpc	r23, r1
     9a8:	11 f4       	brne	.+4      	; 0x9ae <__unpack_f+0x42>
     9aa:	82 e0       	ldi	r24, 0x02	; 2
     9ac:	37 c0       	rjmp	.+110    	; 0xa1c <__unpack_f+0xb0>
     9ae:	82 e8       	ldi	r24, 0x82	; 130
     9b0:	9f ef       	ldi	r25, 0xFF	; 255
     9b2:	13 96       	adiw	r26, 0x03	; 3
     9b4:	9c 93       	st	X, r25
     9b6:	8e 93       	st	-X, r24
     9b8:	12 97       	sbiw	r26, 0x02	; 2
     9ba:	9a 01       	movw	r18, r20
     9bc:	ab 01       	movw	r20, r22
     9be:	67 e0       	ldi	r22, 0x07	; 7
     9c0:	22 0f       	add	r18, r18
     9c2:	33 1f       	adc	r19, r19
     9c4:	44 1f       	adc	r20, r20
     9c6:	55 1f       	adc	r21, r21
     9c8:	6a 95       	dec	r22
     9ca:	d1 f7       	brne	.-12     	; 0x9c0 <__unpack_f+0x54>
     9cc:	83 e0       	ldi	r24, 0x03	; 3
     9ce:	8c 93       	st	X, r24
     9d0:	0d c0       	rjmp	.+26     	; 0x9ec <__unpack_f+0x80>
     9d2:	22 0f       	add	r18, r18
     9d4:	33 1f       	adc	r19, r19
     9d6:	44 1f       	adc	r20, r20
     9d8:	55 1f       	adc	r21, r21
     9da:	12 96       	adiw	r26, 0x02	; 2
     9dc:	8d 91       	ld	r24, X+
     9de:	9c 91       	ld	r25, X
     9e0:	13 97       	sbiw	r26, 0x03	; 3
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	13 96       	adiw	r26, 0x03	; 3
     9e6:	9c 93       	st	X, r25
     9e8:	8e 93       	st	-X, r24
     9ea:	12 97       	sbiw	r26, 0x02	; 2
     9ec:	20 30       	cpi	r18, 0x00	; 0
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	38 07       	cpc	r19, r24
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	48 07       	cpc	r20, r24
     9f6:	80 e4       	ldi	r24, 0x40	; 64
     9f8:	58 07       	cpc	r21, r24
     9fa:	58 f3       	brcs	.-42     	; 0x9d2 <__unpack_f+0x66>
     9fc:	14 96       	adiw	r26, 0x04	; 4
     9fe:	2d 93       	st	X+, r18
     a00:	3d 93       	st	X+, r19
     a02:	4d 93       	st	X+, r20
     a04:	5c 93       	st	X, r21
     a06:	17 97       	sbiw	r26, 0x07	; 7
     a08:	08 95       	ret
     a0a:	2f 3f       	cpi	r18, 0xFF	; 255
     a0c:	31 05       	cpc	r19, r1
     a0e:	79 f4       	brne	.+30     	; 0xa2e <__unpack_f+0xc2>
     a10:	41 15       	cp	r20, r1
     a12:	51 05       	cpc	r21, r1
     a14:	61 05       	cpc	r22, r1
     a16:	71 05       	cpc	r23, r1
     a18:	19 f4       	brne	.+6      	; 0xa20 <__unpack_f+0xb4>
     a1a:	84 e0       	ldi	r24, 0x04	; 4
     a1c:	8c 93       	st	X, r24
     a1e:	08 95       	ret
     a20:	64 ff       	sbrs	r22, 4
     a22:	03 c0       	rjmp	.+6      	; 0xa2a <__unpack_f+0xbe>
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	8c 93       	st	X, r24
     a28:	12 c0       	rjmp	.+36     	; 0xa4e <__unpack_f+0xe2>
     a2a:	1c 92       	st	X, r1
     a2c:	10 c0       	rjmp	.+32     	; 0xa4e <__unpack_f+0xe2>
     a2e:	2f 57       	subi	r18, 0x7F	; 127
     a30:	30 40       	sbci	r19, 0x00	; 0
     a32:	13 96       	adiw	r26, 0x03	; 3
     a34:	3c 93       	st	X, r19
     a36:	2e 93       	st	-X, r18
     a38:	12 97       	sbiw	r26, 0x02	; 2
     a3a:	83 e0       	ldi	r24, 0x03	; 3
     a3c:	8c 93       	st	X, r24
     a3e:	87 e0       	ldi	r24, 0x07	; 7
     a40:	44 0f       	add	r20, r20
     a42:	55 1f       	adc	r21, r21
     a44:	66 1f       	adc	r22, r22
     a46:	77 1f       	adc	r23, r23
     a48:	8a 95       	dec	r24
     a4a:	d1 f7       	brne	.-12     	; 0xa40 <__unpack_f+0xd4>
     a4c:	70 64       	ori	r23, 0x40	; 64
     a4e:	14 96       	adiw	r26, 0x04	; 4
     a50:	4d 93       	st	X+, r20
     a52:	5d 93       	st	X+, r21
     a54:	6d 93       	st	X+, r22
     a56:	7c 93       	st	X, r23
     a58:	17 97       	sbiw	r26, 0x07	; 7
     a5a:	08 95       	ret

00000a5c <sprintf>:
     a5c:	ae e0       	ldi	r26, 0x0E	; 14
     a5e:	b0 e0       	ldi	r27, 0x00	; 0
     a60:	e4 e3       	ldi	r30, 0x34	; 52
     a62:	f5 e0       	ldi	r31, 0x05	; 5
     a64:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__prologue_saves__+0x1c>
     a68:	0d 89       	ldd	r16, Y+21	; 0x15
     a6a:	1e 89       	ldd	r17, Y+22	; 0x16
     a6c:	86 e0       	ldi	r24, 0x06	; 6
     a6e:	8c 83       	std	Y+4, r24	; 0x04
     a70:	1a 83       	std	Y+2, r17	; 0x02
     a72:	09 83       	std	Y+1, r16	; 0x01
     a74:	8f ef       	ldi	r24, 0xFF	; 255
     a76:	9f e7       	ldi	r25, 0x7F	; 127
     a78:	9e 83       	std	Y+6, r25	; 0x06
     a7a:	8d 83       	std	Y+5, r24	; 0x05
     a7c:	9e 01       	movw	r18, r28
     a7e:	27 5e       	subi	r18, 0xE7	; 231
     a80:	3f 4f       	sbci	r19, 0xFF	; 255
     a82:	ce 01       	movw	r24, r28
     a84:	01 96       	adiw	r24, 0x01	; 1
     a86:	6f 89       	ldd	r22, Y+23	; 0x17
     a88:	78 8d       	ldd	r23, Y+24	; 0x18
     a8a:	a9 01       	movw	r20, r18
     a8c:	0e 94 52 05 	call	0xaa4	; 0xaa4 <vfprintf>
     a90:	2f 81       	ldd	r18, Y+7	; 0x07
     a92:	38 85       	ldd	r19, Y+8	; 0x08
     a94:	02 0f       	add	r16, r18
     a96:	13 1f       	adc	r17, r19
     a98:	f8 01       	movw	r30, r16
     a9a:	10 82       	st	Z, r1
     a9c:	2e 96       	adiw	r28, 0x0e	; 14
     a9e:	e4 e0       	ldi	r30, 0x04	; 4
     aa0:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <__epilogue_restores__+0x1c>

00000aa4 <vfprintf>:
     aa4:	ab e0       	ldi	r26, 0x0B	; 11
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	e8 e5       	ldi	r30, 0x58	; 88
     aaa:	f5 e0       	ldi	r31, 0x05	; 5
     aac:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <__prologue_saves__>
     ab0:	3c 01       	movw	r6, r24
     ab2:	2b 01       	movw	r4, r22
     ab4:	5a 01       	movw	r10, r20
     ab6:	fc 01       	movw	r30, r24
     ab8:	17 82       	std	Z+7, r1	; 0x07
     aba:	16 82       	std	Z+6, r1	; 0x06
     abc:	83 81       	ldd	r24, Z+3	; 0x03
     abe:	81 fd       	sbrc	r24, 1
     ac0:	03 c0       	rjmp	.+6      	; 0xac8 <vfprintf+0x24>
     ac2:	6f ef       	ldi	r22, 0xFF	; 255
     ac4:	7f ef       	ldi	r23, 0xFF	; 255
     ac6:	c6 c1       	rjmp	.+908    	; 0xe54 <vfprintf+0x3b0>
     ac8:	9a e0       	ldi	r25, 0x0A	; 10
     aca:	89 2e       	mov	r8, r25
     acc:	1e 01       	movw	r2, r28
     ace:	08 94       	sec
     ad0:	21 1c       	adc	r2, r1
     ad2:	31 1c       	adc	r3, r1
     ad4:	f3 01       	movw	r30, r6
     ad6:	23 81       	ldd	r18, Z+3	; 0x03
     ad8:	f2 01       	movw	r30, r4
     ada:	23 fd       	sbrc	r18, 3
     adc:	85 91       	lpm	r24, Z+
     ade:	23 ff       	sbrs	r18, 3
     ae0:	81 91       	ld	r24, Z+
     ae2:	2f 01       	movw	r4, r30
     ae4:	88 23       	and	r24, r24
     ae6:	09 f4       	brne	.+2      	; 0xaea <vfprintf+0x46>
     ae8:	b2 c1       	rjmp	.+868    	; 0xe4e <vfprintf+0x3aa>
     aea:	85 32       	cpi	r24, 0x25	; 37
     aec:	39 f4       	brne	.+14     	; 0xafc <vfprintf+0x58>
     aee:	23 fd       	sbrc	r18, 3
     af0:	85 91       	lpm	r24, Z+
     af2:	23 ff       	sbrs	r18, 3
     af4:	81 91       	ld	r24, Z+
     af6:	2f 01       	movw	r4, r30
     af8:	85 32       	cpi	r24, 0x25	; 37
     afa:	29 f4       	brne	.+10     	; 0xb06 <vfprintf+0x62>
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	b3 01       	movw	r22, r6
     b00:	0e 94 45 07 	call	0xe8a	; 0xe8a <fputc>
     b04:	e7 cf       	rjmp	.-50     	; 0xad4 <vfprintf+0x30>
     b06:	98 2f       	mov	r25, r24
     b08:	ff 24       	eor	r15, r15
     b0a:	ee 24       	eor	r14, r14
     b0c:	99 24       	eor	r9, r9
     b0e:	ff e1       	ldi	r31, 0x1F	; 31
     b10:	ff 15       	cp	r31, r15
     b12:	d0 f0       	brcs	.+52     	; 0xb48 <vfprintf+0xa4>
     b14:	9b 32       	cpi	r25, 0x2B	; 43
     b16:	69 f0       	breq	.+26     	; 0xb32 <vfprintf+0x8e>
     b18:	9c 32       	cpi	r25, 0x2C	; 44
     b1a:	28 f4       	brcc	.+10     	; 0xb26 <vfprintf+0x82>
     b1c:	90 32       	cpi	r25, 0x20	; 32
     b1e:	59 f0       	breq	.+22     	; 0xb36 <vfprintf+0x92>
     b20:	93 32       	cpi	r25, 0x23	; 35
     b22:	91 f4       	brne	.+36     	; 0xb48 <vfprintf+0xa4>
     b24:	0e c0       	rjmp	.+28     	; 0xb42 <vfprintf+0x9e>
     b26:	9d 32       	cpi	r25, 0x2D	; 45
     b28:	49 f0       	breq	.+18     	; 0xb3c <vfprintf+0x98>
     b2a:	90 33       	cpi	r25, 0x30	; 48
     b2c:	69 f4       	brne	.+26     	; 0xb48 <vfprintf+0xa4>
     b2e:	41 e0       	ldi	r20, 0x01	; 1
     b30:	24 c0       	rjmp	.+72     	; 0xb7a <vfprintf+0xd6>
     b32:	52 e0       	ldi	r21, 0x02	; 2
     b34:	f5 2a       	or	r15, r21
     b36:	84 e0       	ldi	r24, 0x04	; 4
     b38:	f8 2a       	or	r15, r24
     b3a:	28 c0       	rjmp	.+80     	; 0xb8c <vfprintf+0xe8>
     b3c:	98 e0       	ldi	r25, 0x08	; 8
     b3e:	f9 2a       	or	r15, r25
     b40:	25 c0       	rjmp	.+74     	; 0xb8c <vfprintf+0xe8>
     b42:	e0 e1       	ldi	r30, 0x10	; 16
     b44:	fe 2a       	or	r15, r30
     b46:	22 c0       	rjmp	.+68     	; 0xb8c <vfprintf+0xe8>
     b48:	f7 fc       	sbrc	r15, 7
     b4a:	29 c0       	rjmp	.+82     	; 0xb9e <vfprintf+0xfa>
     b4c:	89 2f       	mov	r24, r25
     b4e:	80 53       	subi	r24, 0x30	; 48
     b50:	8a 30       	cpi	r24, 0x0A	; 10
     b52:	70 f4       	brcc	.+28     	; 0xb70 <vfprintf+0xcc>
     b54:	f6 fe       	sbrs	r15, 6
     b56:	05 c0       	rjmp	.+10     	; 0xb62 <vfprintf+0xbe>
     b58:	98 9c       	mul	r9, r8
     b5a:	90 2c       	mov	r9, r0
     b5c:	11 24       	eor	r1, r1
     b5e:	98 0e       	add	r9, r24
     b60:	15 c0       	rjmp	.+42     	; 0xb8c <vfprintf+0xe8>
     b62:	e8 9c       	mul	r14, r8
     b64:	e0 2c       	mov	r14, r0
     b66:	11 24       	eor	r1, r1
     b68:	e8 0e       	add	r14, r24
     b6a:	f0 e2       	ldi	r31, 0x20	; 32
     b6c:	ff 2a       	or	r15, r31
     b6e:	0e c0       	rjmp	.+28     	; 0xb8c <vfprintf+0xe8>
     b70:	9e 32       	cpi	r25, 0x2E	; 46
     b72:	29 f4       	brne	.+10     	; 0xb7e <vfprintf+0xda>
     b74:	f6 fc       	sbrc	r15, 6
     b76:	6b c1       	rjmp	.+726    	; 0xe4e <vfprintf+0x3aa>
     b78:	40 e4       	ldi	r20, 0x40	; 64
     b7a:	f4 2a       	or	r15, r20
     b7c:	07 c0       	rjmp	.+14     	; 0xb8c <vfprintf+0xe8>
     b7e:	9c 36       	cpi	r25, 0x6C	; 108
     b80:	19 f4       	brne	.+6      	; 0xb88 <vfprintf+0xe4>
     b82:	50 e8       	ldi	r21, 0x80	; 128
     b84:	f5 2a       	or	r15, r21
     b86:	02 c0       	rjmp	.+4      	; 0xb8c <vfprintf+0xe8>
     b88:	98 36       	cpi	r25, 0x68	; 104
     b8a:	49 f4       	brne	.+18     	; 0xb9e <vfprintf+0xfa>
     b8c:	f2 01       	movw	r30, r4
     b8e:	23 fd       	sbrc	r18, 3
     b90:	95 91       	lpm	r25, Z+
     b92:	23 ff       	sbrs	r18, 3
     b94:	91 91       	ld	r25, Z+
     b96:	2f 01       	movw	r4, r30
     b98:	99 23       	and	r25, r25
     b9a:	09 f0       	breq	.+2      	; 0xb9e <vfprintf+0xfa>
     b9c:	b8 cf       	rjmp	.-144    	; 0xb0e <vfprintf+0x6a>
     b9e:	89 2f       	mov	r24, r25
     ba0:	85 54       	subi	r24, 0x45	; 69
     ba2:	83 30       	cpi	r24, 0x03	; 3
     ba4:	18 f0       	brcs	.+6      	; 0xbac <vfprintf+0x108>
     ba6:	80 52       	subi	r24, 0x20	; 32
     ba8:	83 30       	cpi	r24, 0x03	; 3
     baa:	38 f4       	brcc	.+14     	; 0xbba <vfprintf+0x116>
     bac:	44 e0       	ldi	r20, 0x04	; 4
     bae:	50 e0       	ldi	r21, 0x00	; 0
     bb0:	a4 0e       	add	r10, r20
     bb2:	b5 1e       	adc	r11, r21
     bb4:	5f e3       	ldi	r21, 0x3F	; 63
     bb6:	59 83       	std	Y+1, r21	; 0x01
     bb8:	0f c0       	rjmp	.+30     	; 0xbd8 <vfprintf+0x134>
     bba:	93 36       	cpi	r25, 0x63	; 99
     bbc:	31 f0       	breq	.+12     	; 0xbca <vfprintf+0x126>
     bbe:	93 37       	cpi	r25, 0x73	; 115
     bc0:	79 f0       	breq	.+30     	; 0xbe0 <vfprintf+0x13c>
     bc2:	93 35       	cpi	r25, 0x53	; 83
     bc4:	09 f0       	breq	.+2      	; 0xbc8 <vfprintf+0x124>
     bc6:	56 c0       	rjmp	.+172    	; 0xc74 <vfprintf+0x1d0>
     bc8:	20 c0       	rjmp	.+64     	; 0xc0a <vfprintf+0x166>
     bca:	f5 01       	movw	r30, r10
     bcc:	80 81       	ld	r24, Z
     bce:	89 83       	std	Y+1, r24	; 0x01
     bd0:	42 e0       	ldi	r20, 0x02	; 2
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	a4 0e       	add	r10, r20
     bd6:	b5 1e       	adc	r11, r21
     bd8:	61 01       	movw	r12, r2
     bda:	01 e0       	ldi	r16, 0x01	; 1
     bdc:	10 e0       	ldi	r17, 0x00	; 0
     bde:	12 c0       	rjmp	.+36     	; 0xc04 <vfprintf+0x160>
     be0:	f5 01       	movw	r30, r10
     be2:	c0 80       	ld	r12, Z
     be4:	d1 80       	ldd	r13, Z+1	; 0x01
     be6:	f6 fc       	sbrc	r15, 6
     be8:	03 c0       	rjmp	.+6      	; 0xbf0 <vfprintf+0x14c>
     bea:	6f ef       	ldi	r22, 0xFF	; 255
     bec:	7f ef       	ldi	r23, 0xFF	; 255
     bee:	02 c0       	rjmp	.+4      	; 0xbf4 <vfprintf+0x150>
     bf0:	69 2d       	mov	r22, r9
     bf2:	70 e0       	ldi	r23, 0x00	; 0
     bf4:	42 e0       	ldi	r20, 0x02	; 2
     bf6:	50 e0       	ldi	r21, 0x00	; 0
     bf8:	a4 0e       	add	r10, r20
     bfa:	b5 1e       	adc	r11, r21
     bfc:	c6 01       	movw	r24, r12
     bfe:	0e 94 3a 07 	call	0xe74	; 0xe74 <strnlen>
     c02:	8c 01       	movw	r16, r24
     c04:	5f e7       	ldi	r21, 0x7F	; 127
     c06:	f5 22       	and	r15, r21
     c08:	14 c0       	rjmp	.+40     	; 0xc32 <vfprintf+0x18e>
     c0a:	f5 01       	movw	r30, r10
     c0c:	c0 80       	ld	r12, Z
     c0e:	d1 80       	ldd	r13, Z+1	; 0x01
     c10:	f6 fc       	sbrc	r15, 6
     c12:	03 c0       	rjmp	.+6      	; 0xc1a <vfprintf+0x176>
     c14:	6f ef       	ldi	r22, 0xFF	; 255
     c16:	7f ef       	ldi	r23, 0xFF	; 255
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <vfprintf+0x17a>
     c1a:	69 2d       	mov	r22, r9
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	42 e0       	ldi	r20, 0x02	; 2
     c20:	50 e0       	ldi	r21, 0x00	; 0
     c22:	a4 0e       	add	r10, r20
     c24:	b5 1e       	adc	r11, r21
     c26:	c6 01       	movw	r24, r12
     c28:	0e 94 2f 07 	call	0xe5e	; 0xe5e <strnlen_P>
     c2c:	8c 01       	movw	r16, r24
     c2e:	50 e8       	ldi	r21, 0x80	; 128
     c30:	f5 2a       	or	r15, r21
     c32:	f3 fe       	sbrs	r15, 3
     c34:	07 c0       	rjmp	.+14     	; 0xc44 <vfprintf+0x1a0>
     c36:	1a c0       	rjmp	.+52     	; 0xc6c <vfprintf+0x1c8>
     c38:	80 e2       	ldi	r24, 0x20	; 32
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	b3 01       	movw	r22, r6
     c3e:	0e 94 45 07 	call	0xe8a	; 0xe8a <fputc>
     c42:	ea 94       	dec	r14
     c44:	8e 2d       	mov	r24, r14
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	08 17       	cp	r16, r24
     c4a:	19 07       	cpc	r17, r25
     c4c:	a8 f3       	brcs	.-22     	; 0xc38 <vfprintf+0x194>
     c4e:	0e c0       	rjmp	.+28     	; 0xc6c <vfprintf+0x1c8>
     c50:	f6 01       	movw	r30, r12
     c52:	f7 fc       	sbrc	r15, 7
     c54:	85 91       	lpm	r24, Z+
     c56:	f7 fe       	sbrs	r15, 7
     c58:	81 91       	ld	r24, Z+
     c5a:	6f 01       	movw	r12, r30
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	b3 01       	movw	r22, r6
     c60:	0e 94 45 07 	call	0xe8a	; 0xe8a <fputc>
     c64:	e1 10       	cpse	r14, r1
     c66:	ea 94       	dec	r14
     c68:	01 50       	subi	r16, 0x01	; 1
     c6a:	10 40       	sbci	r17, 0x00	; 0
     c6c:	01 15       	cp	r16, r1
     c6e:	11 05       	cpc	r17, r1
     c70:	79 f7       	brne	.-34     	; 0xc50 <vfprintf+0x1ac>
     c72:	ea c0       	rjmp	.+468    	; 0xe48 <vfprintf+0x3a4>
     c74:	94 36       	cpi	r25, 0x64	; 100
     c76:	11 f0       	breq	.+4      	; 0xc7c <vfprintf+0x1d8>
     c78:	99 36       	cpi	r25, 0x69	; 105
     c7a:	69 f5       	brne	.+90     	; 0xcd6 <vfprintf+0x232>
     c7c:	f7 fe       	sbrs	r15, 7
     c7e:	08 c0       	rjmp	.+16     	; 0xc90 <vfprintf+0x1ec>
     c80:	f5 01       	movw	r30, r10
     c82:	20 81       	ld	r18, Z
     c84:	31 81       	ldd	r19, Z+1	; 0x01
     c86:	42 81       	ldd	r20, Z+2	; 0x02
     c88:	53 81       	ldd	r21, Z+3	; 0x03
     c8a:	84 e0       	ldi	r24, 0x04	; 4
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0a c0       	rjmp	.+20     	; 0xca4 <vfprintf+0x200>
     c90:	f5 01       	movw	r30, r10
     c92:	80 81       	ld	r24, Z
     c94:	91 81       	ldd	r25, Z+1	; 0x01
     c96:	9c 01       	movw	r18, r24
     c98:	44 27       	eor	r20, r20
     c9a:	37 fd       	sbrc	r19, 7
     c9c:	40 95       	com	r20
     c9e:	54 2f       	mov	r21, r20
     ca0:	82 e0       	ldi	r24, 0x02	; 2
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	a8 0e       	add	r10, r24
     ca6:	b9 1e       	adc	r11, r25
     ca8:	9f e6       	ldi	r25, 0x6F	; 111
     caa:	f9 22       	and	r15, r25
     cac:	57 ff       	sbrs	r21, 7
     cae:	09 c0       	rjmp	.+18     	; 0xcc2 <vfprintf+0x21e>
     cb0:	50 95       	com	r21
     cb2:	40 95       	com	r20
     cb4:	30 95       	com	r19
     cb6:	21 95       	neg	r18
     cb8:	3f 4f       	sbci	r19, 0xFF	; 255
     cba:	4f 4f       	sbci	r20, 0xFF	; 255
     cbc:	5f 4f       	sbci	r21, 0xFF	; 255
     cbe:	e0 e8       	ldi	r30, 0x80	; 128
     cc0:	fe 2a       	or	r15, r30
     cc2:	ca 01       	movw	r24, r20
     cc4:	b9 01       	movw	r22, r18
     cc6:	a1 01       	movw	r20, r2
     cc8:	2a e0       	ldi	r18, 0x0A	; 10
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	0e 94 71 07 	call	0xee2	; 0xee2 <__ultoa_invert>
     cd0:	d8 2e       	mov	r13, r24
     cd2:	d2 18       	sub	r13, r2
     cd4:	40 c0       	rjmp	.+128    	; 0xd56 <vfprintf+0x2b2>
     cd6:	95 37       	cpi	r25, 0x75	; 117
     cd8:	29 f4       	brne	.+10     	; 0xce4 <vfprintf+0x240>
     cda:	1f 2d       	mov	r17, r15
     cdc:	1f 7e       	andi	r17, 0xEF	; 239
     cde:	2a e0       	ldi	r18, 0x0A	; 10
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	1d c0       	rjmp	.+58     	; 0xd1e <vfprintf+0x27a>
     ce4:	1f 2d       	mov	r17, r15
     ce6:	19 7f       	andi	r17, 0xF9	; 249
     ce8:	9f 36       	cpi	r25, 0x6F	; 111
     cea:	61 f0       	breq	.+24     	; 0xd04 <vfprintf+0x260>
     cec:	90 37       	cpi	r25, 0x70	; 112
     cee:	20 f4       	brcc	.+8      	; 0xcf8 <vfprintf+0x254>
     cf0:	98 35       	cpi	r25, 0x58	; 88
     cf2:	09 f0       	breq	.+2      	; 0xcf6 <vfprintf+0x252>
     cf4:	ac c0       	rjmp	.+344    	; 0xe4e <vfprintf+0x3aa>
     cf6:	0f c0       	rjmp	.+30     	; 0xd16 <vfprintf+0x272>
     cf8:	90 37       	cpi	r25, 0x70	; 112
     cfa:	39 f0       	breq	.+14     	; 0xd0a <vfprintf+0x266>
     cfc:	98 37       	cpi	r25, 0x78	; 120
     cfe:	09 f0       	breq	.+2      	; 0xd02 <vfprintf+0x25e>
     d00:	a6 c0       	rjmp	.+332    	; 0xe4e <vfprintf+0x3aa>
     d02:	04 c0       	rjmp	.+8      	; 0xd0c <vfprintf+0x268>
     d04:	28 e0       	ldi	r18, 0x08	; 8
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	0a c0       	rjmp	.+20     	; 0xd1e <vfprintf+0x27a>
     d0a:	10 61       	ori	r17, 0x10	; 16
     d0c:	14 fd       	sbrc	r17, 4
     d0e:	14 60       	ori	r17, 0x04	; 4
     d10:	20 e1       	ldi	r18, 0x10	; 16
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	04 c0       	rjmp	.+8      	; 0xd1e <vfprintf+0x27a>
     d16:	14 fd       	sbrc	r17, 4
     d18:	16 60       	ori	r17, 0x06	; 6
     d1a:	20 e1       	ldi	r18, 0x10	; 16
     d1c:	32 e0       	ldi	r19, 0x02	; 2
     d1e:	17 ff       	sbrs	r17, 7
     d20:	08 c0       	rjmp	.+16     	; 0xd32 <vfprintf+0x28e>
     d22:	f5 01       	movw	r30, r10
     d24:	60 81       	ld	r22, Z
     d26:	71 81       	ldd	r23, Z+1	; 0x01
     d28:	82 81       	ldd	r24, Z+2	; 0x02
     d2a:	93 81       	ldd	r25, Z+3	; 0x03
     d2c:	44 e0       	ldi	r20, 0x04	; 4
     d2e:	50 e0       	ldi	r21, 0x00	; 0
     d30:	08 c0       	rjmp	.+16     	; 0xd42 <vfprintf+0x29e>
     d32:	f5 01       	movw	r30, r10
     d34:	80 81       	ld	r24, Z
     d36:	91 81       	ldd	r25, Z+1	; 0x01
     d38:	bc 01       	movw	r22, r24
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	42 e0       	ldi	r20, 0x02	; 2
     d40:	50 e0       	ldi	r21, 0x00	; 0
     d42:	a4 0e       	add	r10, r20
     d44:	b5 1e       	adc	r11, r21
     d46:	a1 01       	movw	r20, r2
     d48:	0e 94 71 07 	call	0xee2	; 0xee2 <__ultoa_invert>
     d4c:	d8 2e       	mov	r13, r24
     d4e:	d2 18       	sub	r13, r2
     d50:	8f e7       	ldi	r24, 0x7F	; 127
     d52:	f8 2e       	mov	r15, r24
     d54:	f1 22       	and	r15, r17
     d56:	f6 fe       	sbrs	r15, 6
     d58:	0b c0       	rjmp	.+22     	; 0xd70 <vfprintf+0x2cc>
     d5a:	5e ef       	ldi	r21, 0xFE	; 254
     d5c:	f5 22       	and	r15, r21
     d5e:	d9 14       	cp	r13, r9
     d60:	38 f4       	brcc	.+14     	; 0xd70 <vfprintf+0x2cc>
     d62:	f4 fe       	sbrs	r15, 4
     d64:	07 c0       	rjmp	.+14     	; 0xd74 <vfprintf+0x2d0>
     d66:	f2 fc       	sbrc	r15, 2
     d68:	05 c0       	rjmp	.+10     	; 0xd74 <vfprintf+0x2d0>
     d6a:	8f ee       	ldi	r24, 0xEF	; 239
     d6c:	f8 22       	and	r15, r24
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <vfprintf+0x2d0>
     d70:	1d 2d       	mov	r17, r13
     d72:	01 c0       	rjmp	.+2      	; 0xd76 <vfprintf+0x2d2>
     d74:	19 2d       	mov	r17, r9
     d76:	f4 fe       	sbrs	r15, 4
     d78:	0d c0       	rjmp	.+26     	; 0xd94 <vfprintf+0x2f0>
     d7a:	fe 01       	movw	r30, r28
     d7c:	ed 0d       	add	r30, r13
     d7e:	f1 1d       	adc	r31, r1
     d80:	80 81       	ld	r24, Z
     d82:	80 33       	cpi	r24, 0x30	; 48
     d84:	19 f4       	brne	.+6      	; 0xd8c <vfprintf+0x2e8>
     d86:	99 ee       	ldi	r25, 0xE9	; 233
     d88:	f9 22       	and	r15, r25
     d8a:	08 c0       	rjmp	.+16     	; 0xd9c <vfprintf+0x2f8>
     d8c:	1f 5f       	subi	r17, 0xFF	; 255
     d8e:	f2 fe       	sbrs	r15, 2
     d90:	05 c0       	rjmp	.+10     	; 0xd9c <vfprintf+0x2f8>
     d92:	03 c0       	rjmp	.+6      	; 0xd9a <vfprintf+0x2f6>
     d94:	8f 2d       	mov	r24, r15
     d96:	86 78       	andi	r24, 0x86	; 134
     d98:	09 f0       	breq	.+2      	; 0xd9c <vfprintf+0x2f8>
     d9a:	1f 5f       	subi	r17, 0xFF	; 255
     d9c:	0f 2d       	mov	r16, r15
     d9e:	f3 fc       	sbrc	r15, 3
     da0:	14 c0       	rjmp	.+40     	; 0xdca <vfprintf+0x326>
     da2:	f0 fe       	sbrs	r15, 0
     da4:	0f c0       	rjmp	.+30     	; 0xdc4 <vfprintf+0x320>
     da6:	1e 15       	cp	r17, r14
     da8:	10 f0       	brcs	.+4      	; 0xdae <vfprintf+0x30a>
     daa:	9d 2c       	mov	r9, r13
     dac:	0b c0       	rjmp	.+22     	; 0xdc4 <vfprintf+0x320>
     dae:	9d 2c       	mov	r9, r13
     db0:	9e 0c       	add	r9, r14
     db2:	91 1a       	sub	r9, r17
     db4:	1e 2d       	mov	r17, r14
     db6:	06 c0       	rjmp	.+12     	; 0xdc4 <vfprintf+0x320>
     db8:	80 e2       	ldi	r24, 0x20	; 32
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	b3 01       	movw	r22, r6
     dbe:	0e 94 45 07 	call	0xe8a	; 0xe8a <fputc>
     dc2:	1f 5f       	subi	r17, 0xFF	; 255
     dc4:	1e 15       	cp	r17, r14
     dc6:	c0 f3       	brcs	.-16     	; 0xdb8 <vfprintf+0x314>
     dc8:	04 c0       	rjmp	.+8      	; 0xdd2 <vfprintf+0x32e>
     dca:	1e 15       	cp	r17, r14
     dcc:	10 f4       	brcc	.+4      	; 0xdd2 <vfprintf+0x32e>
     dce:	e1 1a       	sub	r14, r17
     dd0:	01 c0       	rjmp	.+2      	; 0xdd4 <vfprintf+0x330>
     dd2:	ee 24       	eor	r14, r14
     dd4:	04 ff       	sbrs	r16, 4
     dd6:	0f c0       	rjmp	.+30     	; 0xdf6 <vfprintf+0x352>
     dd8:	80 e3       	ldi	r24, 0x30	; 48
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	b3 01       	movw	r22, r6
     dde:	0e 94 45 07 	call	0xe8a	; 0xe8a <fputc>
     de2:	02 ff       	sbrs	r16, 2
     de4:	1d c0       	rjmp	.+58     	; 0xe20 <vfprintf+0x37c>
     de6:	01 fd       	sbrc	r16, 1
     de8:	03 c0       	rjmp	.+6      	; 0xdf0 <vfprintf+0x34c>
     dea:	88 e7       	ldi	r24, 0x78	; 120
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	0e c0       	rjmp	.+28     	; 0xe0c <vfprintf+0x368>
     df0:	88 e5       	ldi	r24, 0x58	; 88
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	0b c0       	rjmp	.+22     	; 0xe0c <vfprintf+0x368>
     df6:	80 2f       	mov	r24, r16
     df8:	86 78       	andi	r24, 0x86	; 134
     dfa:	91 f0       	breq	.+36     	; 0xe20 <vfprintf+0x37c>
     dfc:	01 ff       	sbrs	r16, 1
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <vfprintf+0x360>
     e00:	8b e2       	ldi	r24, 0x2B	; 43
     e02:	01 c0       	rjmp	.+2      	; 0xe06 <vfprintf+0x362>
     e04:	80 e2       	ldi	r24, 0x20	; 32
     e06:	f7 fc       	sbrc	r15, 7
     e08:	8d e2       	ldi	r24, 0x2D	; 45
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	b3 01       	movw	r22, r6
     e0e:	0e 94 45 07 	call	0xe8a	; 0xe8a <fputc>
     e12:	06 c0       	rjmp	.+12     	; 0xe20 <vfprintf+0x37c>
     e14:	80 e3       	ldi	r24, 0x30	; 48
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	b3 01       	movw	r22, r6
     e1a:	0e 94 45 07 	call	0xe8a	; 0xe8a <fputc>
     e1e:	9a 94       	dec	r9
     e20:	d9 14       	cp	r13, r9
     e22:	c0 f3       	brcs	.-16     	; 0xe14 <vfprintf+0x370>
     e24:	da 94       	dec	r13
     e26:	f1 01       	movw	r30, r2
     e28:	ed 0d       	add	r30, r13
     e2a:	f1 1d       	adc	r31, r1
     e2c:	80 81       	ld	r24, Z
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	b3 01       	movw	r22, r6
     e32:	0e 94 45 07 	call	0xe8a	; 0xe8a <fputc>
     e36:	dd 20       	and	r13, r13
     e38:	a9 f7       	brne	.-22     	; 0xe24 <vfprintf+0x380>
     e3a:	06 c0       	rjmp	.+12     	; 0xe48 <vfprintf+0x3a4>
     e3c:	80 e2       	ldi	r24, 0x20	; 32
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	b3 01       	movw	r22, r6
     e42:	0e 94 45 07 	call	0xe8a	; 0xe8a <fputc>
     e46:	ea 94       	dec	r14
     e48:	ee 20       	and	r14, r14
     e4a:	c1 f7       	brne	.-16     	; 0xe3c <vfprintf+0x398>
     e4c:	43 ce       	rjmp	.-890    	; 0xad4 <vfprintf+0x30>
     e4e:	f3 01       	movw	r30, r6
     e50:	66 81       	ldd	r22, Z+6	; 0x06
     e52:	77 81       	ldd	r23, Z+7	; 0x07
     e54:	cb 01       	movw	r24, r22
     e56:	2b 96       	adiw	r28, 0x0b	; 11
     e58:	e2 e1       	ldi	r30, 0x12	; 18
     e5a:	0c 94 eb 07 	jmp	0xfd6	; 0xfd6 <__epilogue_restores__>

00000e5e <strnlen_P>:
     e5e:	fc 01       	movw	r30, r24
     e60:	05 90       	lpm	r0, Z+
     e62:	61 50       	subi	r22, 0x01	; 1
     e64:	70 40       	sbci	r23, 0x00	; 0
     e66:	01 10       	cpse	r0, r1
     e68:	d8 f7       	brcc	.-10     	; 0xe60 <strnlen_P+0x2>
     e6a:	80 95       	com	r24
     e6c:	90 95       	com	r25
     e6e:	8e 0f       	add	r24, r30
     e70:	9f 1f       	adc	r25, r31
     e72:	08 95       	ret

00000e74 <strnlen>:
     e74:	fc 01       	movw	r30, r24
     e76:	61 50       	subi	r22, 0x01	; 1
     e78:	70 40       	sbci	r23, 0x00	; 0
     e7a:	01 90       	ld	r0, Z+
     e7c:	01 10       	cpse	r0, r1
     e7e:	d8 f7       	brcc	.-10     	; 0xe76 <strnlen+0x2>
     e80:	80 95       	com	r24
     e82:	90 95       	com	r25
     e84:	8e 0f       	add	r24, r30
     e86:	9f 1f       	adc	r25, r31
     e88:	08 95       	ret

00000e8a <fputc>:
     e8a:	0f 93       	push	r16
     e8c:	1f 93       	push	r17
     e8e:	cf 93       	push	r28
     e90:	df 93       	push	r29
     e92:	8c 01       	movw	r16, r24
     e94:	eb 01       	movw	r28, r22
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	81 ff       	sbrs	r24, 1
     e9a:	1b c0       	rjmp	.+54     	; 0xed2 <fputc+0x48>
     e9c:	82 ff       	sbrs	r24, 2
     e9e:	0d c0       	rjmp	.+26     	; 0xeba <fputc+0x30>
     ea0:	2e 81       	ldd	r18, Y+6	; 0x06
     ea2:	3f 81       	ldd	r19, Y+7	; 0x07
     ea4:	8c 81       	ldd	r24, Y+4	; 0x04
     ea6:	9d 81       	ldd	r25, Y+5	; 0x05
     ea8:	28 17       	cp	r18, r24
     eaa:	39 07       	cpc	r19, r25
     eac:	64 f4       	brge	.+24     	; 0xec6 <fputc+0x3c>
     eae:	e8 81       	ld	r30, Y
     eb0:	f9 81       	ldd	r31, Y+1	; 0x01
     eb2:	01 93       	st	Z+, r16
     eb4:	f9 83       	std	Y+1, r31	; 0x01
     eb6:	e8 83       	st	Y, r30
     eb8:	06 c0       	rjmp	.+12     	; 0xec6 <fputc+0x3c>
     eba:	e8 85       	ldd	r30, Y+8	; 0x08
     ebc:	f9 85       	ldd	r31, Y+9	; 0x09
     ebe:	80 2f       	mov	r24, r16
     ec0:	09 95       	icall
     ec2:	89 2b       	or	r24, r25
     ec4:	31 f4       	brne	.+12     	; 0xed2 <fputc+0x48>
     ec6:	8e 81       	ldd	r24, Y+6	; 0x06
     ec8:	9f 81       	ldd	r25, Y+7	; 0x07
     eca:	01 96       	adiw	r24, 0x01	; 1
     ecc:	9f 83       	std	Y+7, r25	; 0x07
     ece:	8e 83       	std	Y+6, r24	; 0x06
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <fputc+0x4c>
     ed2:	0f ef       	ldi	r16, 0xFF	; 255
     ed4:	1f ef       	ldi	r17, 0xFF	; 255
     ed6:	c8 01       	movw	r24, r16
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	1f 91       	pop	r17
     ede:	0f 91       	pop	r16
     ee0:	08 95       	ret

00000ee2 <__ultoa_invert>:
     ee2:	fa 01       	movw	r30, r20
     ee4:	aa 27       	eor	r26, r26
     ee6:	28 30       	cpi	r18, 0x08	; 8
     ee8:	51 f1       	breq	.+84     	; 0xf3e <__ultoa_invert+0x5c>
     eea:	20 31       	cpi	r18, 0x10	; 16
     eec:	81 f1       	breq	.+96     	; 0xf4e <__ultoa_invert+0x6c>
     eee:	e8 94       	clt
     ef0:	6f 93       	push	r22
     ef2:	6e 7f       	andi	r22, 0xFE	; 254
     ef4:	6e 5f       	subi	r22, 0xFE	; 254
     ef6:	7f 4f       	sbci	r23, 0xFF	; 255
     ef8:	8f 4f       	sbci	r24, 0xFF	; 255
     efa:	9f 4f       	sbci	r25, 0xFF	; 255
     efc:	af 4f       	sbci	r26, 0xFF	; 255
     efe:	b1 e0       	ldi	r27, 0x01	; 1
     f00:	3e d0       	rcall	.+124    	; 0xf7e <__ultoa_invert+0x9c>
     f02:	b4 e0       	ldi	r27, 0x04	; 4
     f04:	3c d0       	rcall	.+120    	; 0xf7e <__ultoa_invert+0x9c>
     f06:	67 0f       	add	r22, r23
     f08:	78 1f       	adc	r23, r24
     f0a:	89 1f       	adc	r24, r25
     f0c:	9a 1f       	adc	r25, r26
     f0e:	a1 1d       	adc	r26, r1
     f10:	68 0f       	add	r22, r24
     f12:	79 1f       	adc	r23, r25
     f14:	8a 1f       	adc	r24, r26
     f16:	91 1d       	adc	r25, r1
     f18:	a1 1d       	adc	r26, r1
     f1a:	6a 0f       	add	r22, r26
     f1c:	71 1d       	adc	r23, r1
     f1e:	81 1d       	adc	r24, r1
     f20:	91 1d       	adc	r25, r1
     f22:	a1 1d       	adc	r26, r1
     f24:	20 d0       	rcall	.+64     	; 0xf66 <__ultoa_invert+0x84>
     f26:	09 f4       	brne	.+2      	; 0xf2a <__ultoa_invert+0x48>
     f28:	68 94       	set
     f2a:	3f 91       	pop	r19
     f2c:	2a e0       	ldi	r18, 0x0A	; 10
     f2e:	26 9f       	mul	r18, r22
     f30:	11 24       	eor	r1, r1
     f32:	30 19       	sub	r19, r0
     f34:	30 5d       	subi	r19, 0xD0	; 208
     f36:	31 93       	st	Z+, r19
     f38:	de f6       	brtc	.-74     	; 0xef0 <__ultoa_invert+0xe>
     f3a:	cf 01       	movw	r24, r30
     f3c:	08 95       	ret
     f3e:	46 2f       	mov	r20, r22
     f40:	47 70       	andi	r20, 0x07	; 7
     f42:	40 5d       	subi	r20, 0xD0	; 208
     f44:	41 93       	st	Z+, r20
     f46:	b3 e0       	ldi	r27, 0x03	; 3
     f48:	0f d0       	rcall	.+30     	; 0xf68 <__ultoa_invert+0x86>
     f4a:	c9 f7       	brne	.-14     	; 0xf3e <__ultoa_invert+0x5c>
     f4c:	f6 cf       	rjmp	.-20     	; 0xf3a <__ultoa_invert+0x58>
     f4e:	46 2f       	mov	r20, r22
     f50:	4f 70       	andi	r20, 0x0F	; 15
     f52:	40 5d       	subi	r20, 0xD0	; 208
     f54:	4a 33       	cpi	r20, 0x3A	; 58
     f56:	18 f0       	brcs	.+6      	; 0xf5e <__ultoa_invert+0x7c>
     f58:	49 5d       	subi	r20, 0xD9	; 217
     f5a:	31 fd       	sbrc	r19, 1
     f5c:	40 52       	subi	r20, 0x20	; 32
     f5e:	41 93       	st	Z+, r20
     f60:	02 d0       	rcall	.+4      	; 0xf66 <__ultoa_invert+0x84>
     f62:	a9 f7       	brne	.-22     	; 0xf4e <__ultoa_invert+0x6c>
     f64:	ea cf       	rjmp	.-44     	; 0xf3a <__ultoa_invert+0x58>
     f66:	b4 e0       	ldi	r27, 0x04	; 4
     f68:	a6 95       	lsr	r26
     f6a:	97 95       	ror	r25
     f6c:	87 95       	ror	r24
     f6e:	77 95       	ror	r23
     f70:	67 95       	ror	r22
     f72:	ba 95       	dec	r27
     f74:	c9 f7       	brne	.-14     	; 0xf68 <__ultoa_invert+0x86>
     f76:	00 97       	sbiw	r24, 0x00	; 0
     f78:	61 05       	cpc	r22, r1
     f7a:	71 05       	cpc	r23, r1
     f7c:	08 95       	ret
     f7e:	9b 01       	movw	r18, r22
     f80:	ac 01       	movw	r20, r24
     f82:	0a 2e       	mov	r0, r26
     f84:	06 94       	lsr	r0
     f86:	57 95       	ror	r21
     f88:	47 95       	ror	r20
     f8a:	37 95       	ror	r19
     f8c:	27 95       	ror	r18
     f8e:	ba 95       	dec	r27
     f90:	c9 f7       	brne	.-14     	; 0xf84 <__ultoa_invert+0xa2>
     f92:	62 0f       	add	r22, r18
     f94:	73 1f       	adc	r23, r19
     f96:	84 1f       	adc	r24, r20
     f98:	95 1f       	adc	r25, r21
     f9a:	a0 1d       	adc	r26, r0
     f9c:	08 95       	ret

00000f9e <__prologue_saves__>:
     f9e:	2f 92       	push	r2
     fa0:	3f 92       	push	r3
     fa2:	4f 92       	push	r4
     fa4:	5f 92       	push	r5
     fa6:	6f 92       	push	r6
     fa8:	7f 92       	push	r7
     faa:	8f 92       	push	r8
     fac:	9f 92       	push	r9
     fae:	af 92       	push	r10
     fb0:	bf 92       	push	r11
     fb2:	cf 92       	push	r12
     fb4:	df 92       	push	r13
     fb6:	ef 92       	push	r14
     fb8:	ff 92       	push	r15
     fba:	0f 93       	push	r16
     fbc:	1f 93       	push	r17
     fbe:	cf 93       	push	r28
     fc0:	df 93       	push	r29
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
     fc6:	ca 1b       	sub	r28, r26
     fc8:	db 0b       	sbc	r29, r27
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	f8 94       	cli
     fce:	de bf       	out	0x3e, r29	; 62
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	cd bf       	out	0x3d, r28	; 61
     fd4:	09 94       	ijmp

00000fd6 <__epilogue_restores__>:
     fd6:	2a 88       	ldd	r2, Y+18	; 0x12
     fd8:	39 88       	ldd	r3, Y+17	; 0x11
     fda:	48 88       	ldd	r4, Y+16	; 0x10
     fdc:	5f 84       	ldd	r5, Y+15	; 0x0f
     fde:	6e 84       	ldd	r6, Y+14	; 0x0e
     fe0:	7d 84       	ldd	r7, Y+13	; 0x0d
     fe2:	8c 84       	ldd	r8, Y+12	; 0x0c
     fe4:	9b 84       	ldd	r9, Y+11	; 0x0b
     fe6:	aa 84       	ldd	r10, Y+10	; 0x0a
     fe8:	b9 84       	ldd	r11, Y+9	; 0x09
     fea:	c8 84       	ldd	r12, Y+8	; 0x08
     fec:	df 80       	ldd	r13, Y+7	; 0x07
     fee:	ee 80       	ldd	r14, Y+6	; 0x06
     ff0:	fd 80       	ldd	r15, Y+5	; 0x05
     ff2:	0c 81       	ldd	r16, Y+4	; 0x04
     ff4:	1b 81       	ldd	r17, Y+3	; 0x03
     ff6:	aa 81       	ldd	r26, Y+2	; 0x02
     ff8:	b9 81       	ldd	r27, Y+1	; 0x01
     ffa:	ce 0f       	add	r28, r30
     ffc:	d1 1d       	adc	r29, r1
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	cd bf       	out	0x3d, r28	; 61
    1008:	ed 01       	movw	r28, r26
    100a:	08 95       	ret

0000100c <_exit>:
    100c:	f8 94       	cli

0000100e <__stop_program>:
    100e:	ff cf       	rjmp	.-2      	; 0x100e <__stop_program>
